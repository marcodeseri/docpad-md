{"ts":1376597364795,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Generated by CoffeeScript 1.6.3\nvar Backbone, BasePlugin, CSON, Collection, DocPad, DocumentModel, ElementsCollection, EventEmitterGrouped, Events, FileModel, FilesCollection, MetaCollection, Model, PluginLoader, QueryCollection, ScriptsCollection, StylesCollection, TaskGroup, View, ambi, balUtil, corePath, eachr, extendr, extractOptsAndCallback, lazyRequire, pathUtil, queryEngine, safefs, safeps, superAgent, typeChecker, util, _, _ref,\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __slice = [].slice;\n\npathUtil = require('path');\n\nlazyRequire = require('lazy-require').lazyRequire;\n\ncorePath = pathUtil.join(__dirname, '..', '..');\n\nif ((__indexOf.call(process.argv, '--profile') >= 0)) {\n  debugger;\n  if (process.env.NODEFLY_KEY) {\n    console.log('Loading profiling tool: nodefly');\n    lazyRequire('nodefly', {\n      cwd: corePath\n    }, function(err, nodefly) {\n      if (err) {\n        return;\n      }\n      nodefly.profile(process.env.NODEFLY_KEY, 'docpad');\n      return console.log('Profiling with nodefly');\n    });\n  }\n  if (process.env.NODETIME_KEY) {\n    console.log('Loading profiling tool: nodetime');\n    lazyRequire('nodetime', {\n      cwd: corePath\n    }, function(err, nodetime) {\n      if (err) {\n        return;\n      }\n      nodetime.profile({\n        accountKey: process.env.NODETIME_KEY,\n        appName: 'DocPad'\n      });\n      return console.log('Profiling with nodetime');\n    });\n  }\n  console.log('Loading profiling tool: webkit-devtools-agent');\n  lazyRequire('webkit-devtools-agent', {\n    cwd: corePath\n  }, function(err) {\n    if (err) {\n      return;\n    }\n    return console.log(\"Profiling with webkit-devtools-agent on process id:\", process.pid);\n  });\n}\n\n_ = require('lodash');\n\nCSON = require('cson');\n\nbalUtil = require('bal-util');\n\nextendr = require('extendr');\n\neachr = require('eachr');\n\ntypeChecker = require('typechecker');\n\nambi = require('ambi');\n\nTaskGroup = require('taskgroup').TaskGroup;\n\nsafefs = require('safefs');\n\nsafeps = require('safeps');\n\nutil = require('util');\n\nsuperAgent = require('superagent');\n\nextractOptsAndCallback = require('extract-opts').extractOptsAndCallback;\n\nEventEmitterGrouped = require('event-emitter-grouped').EventEmitterGrouped;\n\n_ref = require('./base'), queryEngine = _ref.queryEngine, Backbone = _ref.Backbone, Events = _ref.Events, Model = _ref.Model, Collection = _ref.Collection, View = _ref.View, QueryCollection = _ref.QueryCollection;\n\nFileModel = require('./models/file');\n\nDocumentModel = require('./models/document');\n\nFilesCollection = require('./collections/files');\n\nElementsCollection = require('./collections/elements');\n\nMetaCollection = require('./collections/meta');\n\nScriptsCollection = require('./collections/scripts');\n\nStylesCollection = require('./collections/styles');\n\nPluginLoader = require('./plugin-loader');\n\nBasePlugin = require('./plugin');\n\nDocPad = (function(_super) {\n  __extends(DocPad, _super);\n\n  DocPad.prototype.Events = Events;\n\n  DocPad.prototype.Model = Model;\n\n  DocPad.prototype.Collection = Collection;\n\n  DocPad.prototype.View = View;\n\n  DocPad.prototype.QueryCollection = QueryCollection;\n\n  DocPad.prototype.FileModel = FileModel;\n\n  DocPad.prototype.DocumentModel = DocumentModel;\n\n  DocPad.prototype.FilesCollection = FilesCollection;\n\n  DocPad.prototype.ElementsCollection = ElementsCollection;\n\n  DocPad.prototype.MetaCollection = MetaCollection;\n\n  DocPad.prototype.ScriptsCollection = ScriptsCollection;\n\n  DocPad.prototype.StylesCollection = StylesCollection;\n\n  DocPad.prototype.PluginLoader = PluginLoader;\n\n  DocPad.prototype.BasePlugin = BasePlugin;\n\n  DocPad.prototype.growlInstance = null;\n\n  DocPad.prototype.getGrowlInstance = function() {\n    var err;\n    if ((this.growlInstance != null) === false) {\n      if (this.getConfig().growl) {\n        try {\n          this.growlInstance = require('growl');\n        } catch (_error) {\n          err = _error;\n          this.growlInstance = false;\n        }\n      } else {\n        this.growlInstance = false;\n      }\n    }\n    return this.growlInstance;\n  };\n\n  DocPad.prototype.version = null;\n\n  DocPad.prototype.getVersion = function() {\n    return this.version;\n  };\n\n  DocPad.prototype.pluginVersion = '2';\n\n  DocPad.prototype.getProcessPlatform = function() {\n    return process.platform;\n  };\n\n  DocPad.prototype.getProcessVersion = function() {\n    return process.version.replace(/^v/, '');\n  };\n\n  DocPad.prototype.serverExpress = null;\n\n  DocPad.prototype.serverHttp = null;\n\n  DocPad.prototype.getServer = function(both) {\n    var serverExpress, serverHttp;\n    serverExpress = this.serverExpress, serverHttp = this.serverHttp;\n    if (both) {\n      return {\n        serverExpress: serverExpress,\n        serverHttp: serverHttp\n      };\n    } else {\n      return serverExpress;\n    }\n  };\n\n  DocPad.prototype.setServer = function(servers) {\n    this.serverExpress = servers.serverExpress;\n    return this.serverHttp = servers.serverHttp;\n  };\n\n  DocPad.prototype.loggerInstances = null;\n\n  DocPad.prototype.getLogger = function() {\n    var _ref1;\n    return (_ref1 = this.loggerInstances) != null ? _ref1.logger : void 0;\n  };\n\n  DocPad.prototype.getLoggers = function() {\n    return this.loggerInstances;\n  };\n\n  DocPad.prototype.setLoggers = function(loggers) {\n    if (this.loggerInstances) {\n      this.warn('Loggers have already been set');\n    } else {\n      this.loggerInstances = loggers;\n      this.loggerInstances.logger.setConfig({\n        dry: true\n      });\n      this.loggerInstances.console.setConfig({\n        dry: false\n      }).pipe(process.stdout);\n    }\n    return loggers;\n  };\n\n  DocPad.prototype.actionRunnerInstance = null;\n\n  DocPad.prototype.getActionRunner = function() {\n    return this.actionRunnerInstance;\n  };\n\n  DocPad.prototype.errorRunnerInstance = null;\n\n  DocPad.prototype.getErrorRunner = function() {\n    return this.errorRunnerInstance;\n  };\n\n  DocPad.prototype.trackRunnerInstance = null;\n\n  DocPad.prototype.getTrackRunner = function() {\n    return this.trackRunnerInstance;\n  };\n\n  DocPad.prototype.events = ['extendTemplateData', 'extendCollections', 'docpadLoaded', 'docpadReady', 'consoleSetup', 'generateBefore', 'populateCollectionsBefore', 'populateCollections', 'generateAfter', 'parseBefore', 'parseAfter', 'contextualizeBefore', 'contextualizeAfter', 'renderBefore', 'render', 'renderDocument', 'renderAfter', 'writeBefore', 'writeAfter', 'serverBefore', 'serverExtend', 'serverAfter'];\n\n  DocPad.prototype.getEvents = function() {\n    return this.events;\n  };\n\n  DocPad.prototype.database = null;\n\n  DocPad.prototype.databaseCache = null;\n\n  DocPad.prototype.getDatabase = function() {\n    return this.database;\n  };\n\n  DocPad.prototype.getDatabaseCache = function() {\n    return this.databaseCache || this.database;\n  };\n\n  DocPad.prototype.filesByUrl = null;\n\n  DocPad.prototype.filesBySelector = null;\n\n  DocPad.prototype.filesByOutPath = null;\n\n  DocPad.prototype.blocks = null;\n\n  /* {\n  \t\t# A collection of meta elements\n  \t\tmeta: null  # Elements Collection\n  \n  \t\t# A collection of script elements\n  \t\tscripts: null  # Scripts Collection\n  \n  \t\t# Collection of style elements\n  \t\tstyles: null  # Styles Collection\n  \t}\n  */\n\n\n  DocPad.prototype.getBlock = function(name, clone) {\n    var block, classname;\n    block = this.blocks[name];\n    if (clone) {\n      classname = name[0].toUpperCase() + name.slice(1) + 'Collection';\n      block = new this[classname](block.models);\n    }\n    return block;\n  };\n\n  DocPad.prototype.setBlock = function(name, value) {\n    if (this.blocks[name] != null) {\n      this.blocks[name].destroy();\n      if (value) {\n        this.blocks[name] = value;\n      } else {\n        delete this.blocks[name];\n      }\n    } else {\n      this.blocks[name] = value;\n    }\n    return this;\n  };\n\n  DocPad.prototype.getBlocks = function(blocks) {\n    this.blocks;\n    return this;\n  };\n\n  DocPad.prototype.setBlocks = function(blocks) {\n    var name, value;\n    for (name in blocks) {\n      if (!__hasProp.call(blocks, name)) continue;\n      value = blocks[name];\n      this.setBlock(name, value);\n    }\n    return this;\n  };\n\n  DocPad.prototype.eachBlock = function(fn) {\n    eachr(this.blocks, fn);\n    return this;\n  };\n\n  DocPad.prototype.collections = null;\n\n  DocPad.prototype.getCollection = function(name) {\n    if (name === 'database') {\n      return this.getDatabase();\n    } else {\n      return this.collections[name];\n    }\n  };\n\n  DocPad.prototype.setCollection = function(name, value) {\n    var _base, _ref1;\n    if ((_ref1 = this.collections[name]) != null) {\n      _ref1.destroy();\n    }\n    if (value) {\n      if ((_base = value.options).name == null) {\n        _base.name = name;\n      }\n      this.collections[name] = value;\n    } else {\n      delete this.collections[name];\n    }\n    return this;\n  };\n\n  DocPad.prototype.getCollections = function() {\n    return this.collections;\n  };\n\n  DocPad.prototype.setCollections = function(collections) {\n    var name, value;\n    for (name in collections) {\n      if (!__hasProp.call(collections, name)) continue;\n      value = collections[name];\n      this.setCollection(name, value);\n    }\n    return this;\n  };\n\n  DocPad.prototype.eachCollection = function(fn) {\n    eachr(this.collections, fn);\n    return this;\n  };\n\n  DocPad.prototype.getFiles = function(query, sorting, paging) {\n    var files, key;\n    key = JSON.stringify({\n      query: query,\n      sorting: sorting,\n      paging: paging\n    });\n    files = this.getCollection(key);\n    if (!files) {\n      files = this.getDatabase().findAllLive(query, sorting, paging);\n      this.setCollection(key, files);\n    }\n    return files;\n  };\n\n  DocPad.prototype.getFile = function(query, sorting, paging) {\n    var file;\n    file = this.getDatabase().findOne(query, sorting, paging);\n    return file;\n  };\n\n  DocPad.prototype.getFilesAtPath = function(path, sorting, paging) {\n    var files, query;\n    query = {\n      $or: [\n        {\n          relativePath: {\n            $startsWith: path\n          }\n        }, {\n          fullPath: {\n            $startsWith: path\n          }\n        }\n      ]\n    };\n    files = this.getFiles(query, sorting, paging);\n    return files;\n  };\n\n  DocPad.prototype.getFileAtPath = function(path, sorting, paging) {\n    var file;\n    file = this.getDatabase().fuzzyFindOne(path, sorting, paging);\n    return file;\n  };\n\n  DocPad.prototype.getFileByUrl = function(url, opts) {\n    var file;\n    if (opts == null) {\n      opts = {};\n    }\n    if (opts.collection == null) {\n      opts.collection = this.getDatabase();\n    }\n    file = opts.collection.get(this.filesByUrl[url]);\n    return file;\n  };\n\n  DocPad.prototype.getFileById = function(id, opts) {\n    var file;\n    if (opts == null) {\n      opts = {};\n    }\n    if (opts.collection == null) {\n      opts.collection = this.getDatabase();\n    }\n    file = opts.collection.get(id);\n    return file;\n  };\n\n  DocPad.prototype.getUrlPathname = function(url) {\n    return url.replace(/\\?.*/, '');\n  };\n\n  DocPad.prototype.getFileByRoute = function(url, next) {\n    var cleanUrl, database, docpad, file;\n    docpad = this;\n    if (docpad.generateEnded === null) {\n      docpad.once('generateAfter', function() {\n        return docpad.getFileByRoute(url, next);\n      });\n      return this;\n    }\n    database = docpad.getDatabaseCache();\n    cleanUrl = docpad.getUrlPathname(url);\n    file = docpad.getFileByUrl(url, {\n      collection: database\n    }) || docpad.getFileByUrl(cleanUrl, {\n      collection: database\n    });\n    next(null, file);\n    return this;\n  };\n\n  DocPad.prototype.getFileBySelector = function(selector, opts) {\n    var file;\n    if (opts == null) {\n      opts = {};\n    }\n    if (opts.collection == null) {\n      opts.collection = this.getDatabase();\n    }\n    file = opts.collection.get(this.filesBySelector[selector]);\n    if (!file) {\n      file = opts.collection.fuzzyFindOne(selector);\n      if (file) {\n        this.filesBySelector[selector] = file.id;\n      }\n    }\n    return file;\n  };\n\n  DocPad.prototype.skeletonsCollection = null;\n\n  DocPad.prototype.getSkeletons = function(next) {\n    var docpad, locale;\n    docpad = this;\n    locale = this.getLocale();\n    if (this.skeletonsCollection != null) {\n      return next(null, this.skeletonsCollection);\n    }\n    this.skeletonsCollection = new Collection();\n    this.skeletonsCollection.comparator = queryEngine.generateComparator({\n      position: 1,\n      name: 1\n    });\n    this.getExchange(function(err, exchange) {\n      var index, skeleton, skeletonKey, _ref1;\n      if (err) {\n        return next(err);\n      }\n      index = 0;\n      if (exchange) {\n        _ref1 = exchange.skeletons;\n        for (skeletonKey in _ref1) {\n          if (!__hasProp.call(_ref1, skeletonKey)) continue;\n          skeleton = _ref1[skeletonKey];\n          if (skeleton.id == null) {\n            skeleton.id = skeletonKey;\n          }\n          if (skeleton.name == null) {\n            skeleton.name = skeletonKey;\n          }\n          if (skeleton.position == null) {\n            skeleton.position = index;\n          }\n          docpad.skeletonsCollection.add(new Model(skeleton));\n          ++index;\n        }\n      }\n      docpad.skeletonsCollection.add(new Model({\n        id: 'none',\n        name: locale.skeletonNoneName,\n        description: locale.skeletonNoneDescription,\n        position: index\n      }));\n      return next(null, docpad.skeletonsCollection);\n    });\n    return this;\n  };\n\n  DocPad.prototype.slowPlugins = null;\n\n  DocPad.prototype.loadedPlugins = null;\n\n  DocPad.prototype.exchange = null;\n\n  DocPad.prototype.corePath = corePath;\n\n  DocPad.prototype.libPath = __dirname;\n\n  DocPad.prototype.mainPath = pathUtil.join(__dirname, 'docpad');\n\n  DocPad.prototype.packagePath = pathUtil.join(__dirname, '..', '..', 'package.json');\n\n  DocPad.prototype.localePath = pathUtil.join(__dirname, '..', '..', 'locale');\n\n  DocPad.prototype.debugLogPath = pathUtil.join(process.cwd(), 'docpad-debug.log');\n\n  DocPad.prototype.userConfigPath = '.docpad.cson';\n\n  DocPad.prototype.initialTemplateData = null;\n\n  DocPad.prototype.pluginsTemplateData = null;\n\n  DocPad.prototype.getTemplateData = function(userTemplateData) {\n    var docpad, locale, renderPasses, templateData, _base, _base1;\n    userTemplateData || (userTemplateData = {});\n    docpad = this;\n    renderPasses = this.config.renderPasses;\n    locale = this.getLocale();\n    if (this.initialTemplateData == null) {\n      this.initialTemplateData = {\n        site: {},\n        getEnvironment: function() {\n          return docpad.getEnvironment();\n        },\n        getEnvironments: function() {\n          return docpad.getEnvironments();\n        },\n        referencesOthers: function(flag) {\n          var document;\n          document = this.getDocument();\n          document.referencesOthers();\n          return null;\n        },\n        getDocument: function() {\n          return this.documentModel;\n        },\n        getPath: function(path, parentPath) {\n          var document;\n          document = this.getDocument();\n          path = document.getPath(path, parentPath);\n          return path;\n        },\n        getFiles: function(query, sorting, paging) {\n          var result;\n          this.referencesOthers();\n          result = docpad.getFiles(query, sorting, paging);\n          return result;\n        },\n        getFile: function(query, sorting, paging) {\n          var result;\n          this.referencesOthers();\n          result = docpad.getFile(query, sorting, paging);\n          return result;\n        },\n        getFilesAtPath: function(path, sorting, paging) {\n          var result;\n          this.referencesOthers();\n          path = this.getPath(path);\n          result = docpad.getFilesAtPath(path, sorting, paging);\n          return result;\n        },\n        getFileAtPath: function(relativePath) {\n          var path, result;\n          this.referencesOthers();\n          path = this.getPath(relativePath);\n          result = docpad.getFileAtPath(path);\n          return result;\n        },\n        getFileById: function(id) {\n          var result;\n          this.referencesOthers();\n          result = docpad.getFileById(id);\n          return result;\n        },\n        getDatabase: function() {\n          this.referencesOthers();\n          return docpad.getDatabase();\n        },\n        getCollection: function(name) {\n          this.referencesOthers();\n          return docpad.getCollection(name);\n        },\n        getBlock: function(name) {\n          return docpad.getBlock(name, true);\n        },\n        include: function(subRelativePath, strict) {\n          var err, file;\n          if (strict == null) {\n            strict = true;\n          }\n          file = this.getFileAtPath(subRelativePath);\n          if (file) {\n            if (strict && file.get('rendered') === false) {\n              if (renderPasses === 1) {\n                docpad.warn(util.format(locale.renderedEarlyViaInclude, subRelativePath));\n              }\n              return null;\n            }\n            return file.getOutContent();\n          } else {\n            err = new Error(util.format(locale.includeFailed, subRelativePath));\n            throw err;\n          }\n        }\n      };\n    }\n    templateData = extendr.extend({}, this.initialTemplateData, this.pluginsTemplateData, this.config.templateData, userTemplateData);\n    (_base = templateData.site).date || (_base.date = new Date());\n    (_base1 = templateData.site).keywords || (_base1.keywords = []);\n    if (typeChecker.isString(templateData.site.keywords)) {\n      templateData.site.keywords = templateData.site.keywords.split(/,\\s*/g);\n    }\n    return templateData;\n  };\n\n  DocPad.prototype.locales = {\n    en: CSON.parseFileSync(pathUtil.join(__dirname, '..', '..', 'locale', 'en.cson'))\n  };\n\n  DocPad.prototype.locale = null;\n\n  DocPad.prototype.localeCode = null;\n\n  DocPad.prototype.getLocaleCode = function() {\n    var localeCode, localeCodes, _i, _len;\n    if ((this.localeCode != null) === false) {\n      localeCode = null;\n      localeCodes = [this.getConfig().localeCode, safeps.getLocaleCode(), 'en_AU'];\n      for (_i = 0, _len = localeCodes.length; _i < _len; _i++) {\n        localeCode = localeCodes[_i];\n        if (localeCode && (this.locales[localeCode] != null)) {\n          break;\n        }\n      }\n      this.localeCode = localeCode.toLowerCase();\n    }\n    return this.localeCode;\n  };\n\n  DocPad.prototype.getLanguageCode = function() {\n    var languageCode;\n    if ((this.languageCode != null) === false) {\n      languageCode = safeps.getLanguageCode(this.getLocaleCode());\n      this.languageCode = languageCode.toLowerCase();\n    }\n    return this.languageCode;\n  };\n\n  DocPad.prototype.getCountryCode = function() {\n    var countryCode;\n    if ((this.countryCode != null) === false) {\n      countryCode = safeps.getCountryCode(this.getLocaleCode());\n      this.countryCode = countryCode.toLowerCase();\n    }\n    return this.countryCode;\n  };\n\n  DocPad.prototype.getLocale = function() {\n    if ((this.locale != null) === false) {\n      this.locale = this.locales[this.getLocaleCode()] || this.locales[this.getLanguageCode()] || this.locales['en'];\n    }\n    return this.locale;\n  };\n\n  DocPad.prototype.getEnvironment = function() {\n    var env;\n    env = this.getConfig().env || 'development';\n    return env;\n  };\n\n  DocPad.prototype.getEnvironments = function() {\n    var env, envs;\n    env = this.getEnvironment();\n    envs = env.split(/[, ]+/);\n    return envs;\n  };\n\n  DocPad.prototype.websitePackageConfig = null;\n\n  DocPad.prototype.config = null;\n\n  DocPad.prototype.instanceConfig = null;\n\n  DocPad.prototype.websiteConfig = null;\n\n  DocPad.prototype.userConfig = {\n    name: null,\n    email: null,\n    username: null,\n    subscribed: null,\n    subscribeTryAgain: null\n  };\n\n  DocPad.prototype.initialConfig = {\n    force: false,\n    enableUnlistedPlugins: true,\n    enabledPlugins: {},\n    skipUnsupportedPlugins: true,\n    plugins: {},\n    exchangeUrl: 'https://docpad.org/exchange.json',\n    rootPath: process.cwd(),\n    packagePath: 'package.json',\n    latestPackageUrl: 'https://docpad.org/latest.json',\n    configPaths: ['docpad.js', 'docpad.coffee', 'docpad.json', 'docpad.cson'],\n    pluginPaths: [],\n    pluginsPaths: ['node_modules', 'plugins'],\n    reloadPaths: [],\n    regeneratePaths: [],\n    regenerateDelay: 100,\n    slowFilesDelay: 20 * 1000,\n    outPath: 'out',\n    srcPath: 'src',\n    documentsPaths: ['documents', 'render'],\n    filesPaths: ['files', 'static', 'public'],\n    layoutsPaths: ['layouts'],\n    ignorePaths: false,\n    ignoreHiddenFiles: false,\n    ignoreCommonPatterns: true,\n    ignoreCustomPatterns: false,\n    watchOptions: null,\n    port: null,\n    maxAge: 86400000,\n    serverExpress: null,\n    serverHttp: null,\n    extendServer: true,\n    middlewareStandard: true,\n    middlewareBodyParser: true,\n    middlewareMethodOverride: true,\n    middlewareExpressRouter: true,\n    middleware404: true,\n    middleware500: true,\n    logLevel: ((__indexOf.call(process.argv, '-d') >= 0) ? 7 : 6),\n    logger: null,\n    growl: true,\n    catchExceptions: true,\n    reportErrors: process.argv.join('').indexOf('test') === -1,\n    reportStatistics: process.argv.join('').indexOf('test') === -1,\n    hashKey: '7>9}$3hP86o,4=@T',\n    detectEncoding: false,\n    renderSingleExtensions: false,\n    renderPasses: 1,\n    offline: false,\n    checkVersion: false,\n    welcome: false,\n    prompts: false,\n    poweredByDocPad: true,\n    helperUrl: true ? 'http://docpad-helper.herokuapp.com/' : 'http://localhost:8000/',\n    safeMode: false,\n    templateData: {},\n    collections: {},\n    events: {},\n    regenerateEvery: false,\n    localeCode: null,\n    env: null,\n    environments: {\n      development: {\n        maxAge: false,\n        checkVersion: /docpad$/.test(process.argv[1] || ''),\n        welcome: /docpad$/.test(process.argv[1] || ''),\n        prompts: /docpad$/.test(process.argv[1] || '')\n      }\n    }\n  };\n\n  DocPad.prototype.regenerateTimer = null;\n\n  DocPad.prototype.getConfig = function() {\n    return this.config || {};\n  };\n\n  DocPad.prototype.getPort = function() {\n    var _ref1, _ref2, _ref3, _ref4;\n    return (_ref1 = (_ref2 = (_ref3 = (_ref4 = this.getConfig().port) != null ? _ref4 : process.env.PORT) != null ? _ref3 : process.env.VCAP_APP_PORT) != null ? _ref2 : process.env.VMC_APP_PORT) != null ? _ref1 : 9778;\n  };\n\n  function DocPad(instanceConfig, next) {\n    this.server = __bind(this.server, this);\n    this.serverMiddleware500 = __bind(this.serverMiddleware500, this);\n    this.serverMiddleware404 = __bind(this.serverMiddleware404, this);\n    this.serverMiddlewareRouter = __bind(this.serverMiddlewareRouter, this);\n    this.serverMiddlewareHeader = __bind(this.serverMiddlewareHeader, this);\n    this.serveDocument = __bind(this.serveDocument, this);\n    this.init = __bind(this.init, this);\n    this.skeleton = __bind(this.skeleton, this);\n    this.clean = __bind(this.clean, this);\n    this.update = __bind(this.update, this);\n    this.install = __bind(this.install, this);\n    this.run = __bind(this.run, this);\n    this.watch = __bind(this.watch, this);\n    this.render = __bind(this.render, this);\n    this.generate = __bind(this.generate, this);\n    this.generatePostpare = __bind(this.generatePostpare, this);\n    this.generateRender = __bind(this.generateRender, this);\n    this.generateLoad = __bind(this.generateLoad, this);\n    this.generatePrepare = __bind(this.generatePrepare, this);\n    this.action = __bind(this.action, this);\n    this.notify = __bind(this.notify, this);\n    this.warn = __bind(this.warn, this);\n    this.error = __bind(this.error, this);\n    this.log = __bind(this.log, this);\n    this.fatal = __bind(this.fatal, this);\n    this.populateCollections = __bind(this.populateCollections, this);\n    this.load = __bind(this.load, this);\n    this.setConfig = __bind(this.setConfig, this);\n    this.ready = __bind(this.ready, this);\n    var action, configEventContext, docpad, logger, loggerConsole, loggers, _ref1,\n      _this = this;\n    _ref1 = extractOptsAndCallback(instanceConfig, next), instanceConfig = _ref1[0], next = _ref1[1];\n    docpad = this;\n    this.setMaxListeners(0);\n    configEventContext = {\n      docpad: docpad\n    };\n    this.getEvents().forEach(function(eventName) {\n      return docpad.on(eventName, function(opts, next) {\n        var args, eventHandler, _ref2;\n        eventHandler = (_ref2 = docpad.getConfig().events) != null ? _ref2[eventName] : void 0;\n        if (typeChecker.isFunction(eventHandler)) {\n          args = [opts, next];\n          return ambi.apply(null, [eventHandler.bind(configEventContext)].concat(__slice.call(args)));\n        } else {\n          return next();\n        }\n      });\n    });\n    this.actionRunnerInstance = new TaskGroup().run().on('complete', function(err) {\n      if (err) {\n        return docpad.error(err);\n      }\n    });\n    this.errorRunnerInstance = new TaskGroup().run().on('complete', function(err) {\n      var locale, _ref2;\n      if (err && docpad.getDebugging()) {\n        locale = docpad.getLocale();\n        return docpad.log('warn', locale.reportError + ' ' + locale.errorFollows, ((_ref2 = err.stack) != null ? _ref2 : err.message).toString());\n      }\n    });\n    this.trackRunnerInstance = new TaskGroup().run().on('complete', function(err) {\n      var locale, _ref2;\n      if (err && docpad.getDebugging()) {\n        locale = docpad.getLocale();\n        return docpad.log('warn', locale.trackError + ' ' + locale.errorFollows, ((_ref2 = err.stack) != null ? _ref2 : err.message).toString());\n      }\n    });\n    if ((loggers = instanceConfig.loggers)) {\n      delete instanceConfig.loggers;\n    } else {\n      logger = new (require('caterpillar').Logger)({\n        lineOffset: 2\n      });\n      loggerConsole = logger.pipe(new (require('caterpillar-filter').Filter)).pipe(new (require('caterpillar-human').Human));\n      loggers = {\n        logger: logger,\n        console: loggerConsole\n      };\n    }\n    safefs.unlink(this.debugLogPath, function() {});\n    this.setLoggers(loggers);\n    this.setLogLevel(this.initialConfig.logLevel);\n    this.on('log', function() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return docpad.log.apply(this, args);\n    });\n    this.slowPlugins = {};\n    this.loadedPlugins = {};\n    this.exchange = {};\n    this.pluginsTemplateData = {};\n    this.instanceConfig = {};\n    this.collections = {};\n    this.blocks = {};\n    this.filesByUrl = {};\n    this.filesBySelector = {};\n    this.filesByOutPath = {};\n    this.database = new FilesCollection(null, {\n      name: 'database'\n    }).on('remove', function(model, options) {\n      var outPath, url, _i, _len, _ref2;\n      if (model.get('write') === false) {\n        return;\n      }\n      _ref2 = model.get('urls') || [];\n      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n        url = _ref2[_i];\n        delete docpad.filesByUrl[url];\n      }\n      outPath = model.get('outPath');\n      if (outPath) {\n        return _this.database.findAll({\n          outPath: outPath\n        }).each(function(model) {\n          return model.set({\n            'mtime': new Date()\n          });\n        });\n      }\n    }).on('change:urls', function(model, urls, options) {\n      var url, _i, _j, _len, _len1, _ref2, _results;\n      if (urls == null) {\n        urls = [];\n      }\n      if (model.get('write') === false) {\n        return;\n      }\n      _ref2 = model.previous('urls') || [];\n      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n        url = _ref2[_i];\n        delete docpad.filesByUrl[url];\n      }\n      _results = [];\n      for (_j = 0, _len1 = urls.length; _j < _len1; _j++) {\n        url = urls[_j];\n        _results.push(docpad.filesByUrl[url] = model.cid);\n      }\n      return _results;\n    }).on('change:outPath', function(model, outPath, options) {\n      var existingModel, existingModelId, existingModelPath, message, modelPath, previousModelId, previousModels, previousOutPath, _base;\n      if (model.get('write') === false) {\n        return;\n      }\n      previousOutPath = model.previous('outPath');\n      if (previousOutPath) {\n        previousModels = _this.database.findAll({\n          outPath: previousOutPath\n        });\n        previousModels.each(function(model) {\n          return model.set({\n            'mtime': new Date()\n          });\n        });\n        previousModelId = _this.filesByOutPath[previousOutPath];\n        if (previousModelId === model.id) {\n          if (previousModels.length) {\n            _this.filesByOutPath[previousOutPath] = previousModelId;\n          } else {\n            delete _this.filesByOutPath[previousOutPath];\n          }\n        }\n      }\n      existingModelId = (_base = _this.filesByOutPath)[outPath] != null ? (_base = _this.filesByOutPath)[outPath] : _base[outPath] = model.id;\n      if (existingModelId !== model.id) {\n        existingModel = _this.database.get(existingModelId);\n        if (existingModel) {\n          modelPath = model.get('fullPath') || (model.get('relativePath') + ':' + model.id);\n          existingModelPath = existingModel.get('fullPath') || (existingModel.get('relativePath') + ':' + existingModel.id);\n          message = util.format(docpad.getLocale().outPathConflict, outPath, modelPath, existingModelPath);\n          return docpad.warn(message);\n        } else {\n          return _this.filesByOutPath[outPath] = model.id;\n        }\n      }\n    });\n    this.locales = extendr.dereference(this.locales);\n    this.userConfig = extendr.dereference(this.userConfig);\n    this.initialConfig = extendr.dereference(this.initialConfig);\n    if (instanceConfig.action != null) {\n      action = instanceConfig.action;\n    } else {\n      action = 'load ready';\n    }\n    if (action) {\n      this.action(action, instanceConfig, function(err) {\n        if (err) {\n          return docpad.fatal(err);\n        }\n        return typeof next === \"function\" ? next(null, docpad) : void 0;\n      });\n    } else {\n      if (typeof next === \"function\") {\n        next(null, docpad);\n      }\n    }\n    this;\n  }\n\n  DocPad.prototype.destroy = function() {\n    this.getServer(true).serverHttp.close();\n    return this;\n  };\n\n  DocPad.prototype.emitSerial = function(eventName, opts, next) {\n    var docpad, locale, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = docpad.getLocale();\n    docpad.log('debug', util.format(locale.emittingEvent, eventName));\n    DocPad.__super__.emitSerial.call(this, eventName, opts, function(err) {\n      if (err) {\n        return next(err);\n      }\n      docpad.log('debug', util.format(locale.emittedEvent, eventName));\n      return next(err);\n    });\n    return this;\n  };\n\n  DocPad.prototype.emitParallel = function(eventName, opts, next) {\n    var docpad, locale, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = docpad.getLocale();\n    docpad.log('debug', util.format(locale.emittingEvent, eventName));\n    DocPad.__super__.emitParallel.call(this, eventName, opts, function(err) {\n      if (err) {\n        return next(err);\n      }\n      docpad.log('debug', util.format(locale.emittedEvent, eventName));\n      return next(err);\n    });\n    return this;\n  };\n\n  DocPad.prototype.isIgnoredPath = function(path, opts) {\n    if (opts == null) {\n      opts = {};\n    }\n    opts = extendr.extend({\n      ignorePaths: this.config.ignorePaths,\n      ignoreHiddenFiles: this.config.ignoreHiddenFiles,\n      ignoreCommonPatterns: this.config.ignoreCommonPatterns,\n      ignoreCustomPatterns: this.config.ignoreCustomPatterns\n    }, opts);\n    return balUtil.isIgnoredPath(path, opts);\n  };\n\n  DocPad.prototype.scandir = function(opts) {\n    if (opts == null) {\n      opts = {};\n    }\n    opts = extendr.extend({\n      ignorePaths: this.config.ignorePaths,\n      ignoreHiddenFiles: this.config.ignoreHiddenFiles,\n      ignoreCommonPatterns: this.config.ignoreCommonPatterns,\n      ignoreCustomPatterns: this.config.ignoreCustomPatterns\n    }, opts);\n    return balUtil.scandir(opts);\n  };\n\n  DocPad.prototype.watchdir = function(opts) {\n    if (opts == null) {\n      opts = {};\n    }\n    opts = extendr.extend({\n      ignorePaths: this.config.ignorePaths,\n      ignoreHiddenFiles: this.config.ignoreHiddenFiles,\n      ignoreCommonPatterns: this.config.ignoreCommonPatterns,\n      ignoreCustomPatterns: this.config.ignoreCustomPatterns\n    }, opts, this.config.watchOptions);\n    return require('watchr').watch(opts);\n  };\n\n  DocPad.prototype.ready = function(opts, next) {\n    var config, docpad, instanceConfig, locale, pluginName, pluginsList, tasks, _ref1,\n      _this = this;\n    _ref1 = extractOptsAndCallback(instanceConfig, next), instanceConfig = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    this.DocumentModel.prototype.defaults.renderSingleExtensions = config.renderSingleExtensions;\n    this.compareVersion();\n    if (this.getDebugging()) {\n      pluginsList = ((function() {\n        var _i, _len, _ref2, _results;\n        _ref2 = Object.keys(this.loadedPlugins).sort();\n        _results = [];\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          pluginName = _ref2[_i];\n          _results.push(\"\" + pluginName + \" v\" + this.loadedPlugins[pluginName].version);\n        }\n        return _results;\n      }).call(this)).join(', ');\n    } else {\n      pluginsList = Object.keys(this.loadedPlugins).sort().join(', ');\n    }\n    docpad.log('info', util.format(locale.welcome, \"v\" + (this.getVersion())));\n    docpad.log('info', locale.welcomeContribute);\n    docpad.log('info', util.format(locale.welcomePlugins, pluginsList));\n    docpad.log('info', util.format(locale.welcomeEnvironment, this.getEnvironment()));\n    tasks = new TaskGroup().once('complete', function(err) {\n      if (err) {\n        return docpad.error(err);\n      }\n      return typeof next === \"function\" ? next(null, docpad) : void 0;\n    });\n    tasks.addTask(function(complete) {\n      if (!config.welcome) {\n        return complete();\n      }\n      return docpad.emitSerial('welcome', {\n        docpad: docpad\n      }, complete);\n    });\n    tasks.addTask(function(complete) {\n      var _this = this;\n      if (docpad.userConfig.username) {\n        return complete();\n      }\n      return require('getmac').getMac(function(err, macAddress) {\n        var macAddressHash, _base, _base1;\n        if (err || !macAddress) {\n          return complete();\n        }\n        try {\n          macAddressHash = require('crypto').createHmac('sha1', config.hashKey).update(macAddress).digest('hex');\n        } catch (_error) {\n          err = _error;\n          if (err) {\n            return complete();\n          }\n        }\n        if (macAddressHash) {\n          if ((_base = docpad.userConfig).name == null) {\n            _base.name = \"MAC \" + macAddressHash;\n          }\n          if ((_base1 = docpad.userConfig).username == null) {\n            _base1.username = macAddressHash;\n          }\n        }\n        return complete();\n      });\n    });\n    tasks.addTask(function(complete) {\n      return _this.identify(complete);\n    });\n    tasks.addTask(function(complete) {\n      return _this.emitSerial('docpadReady', {\n        docpad: docpad\n      }, complete);\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.mergeConfigurations = function(configPackages, configsToMerge) {\n    var configPackage, env, envConfig, envs, _i, _j, _len, _len1, _ref1;\n    envs = this.getEnvironments();\n    for (_i = 0, _len = configPackages.length; _i < _len; _i++) {\n      configPackage = configPackages[_i];\n      if (!configPackage) {\n        continue;\n      }\n      configsToMerge.push(configPackage);\n      for (_j = 0, _len1 = envs.length; _j < _len1; _j++) {\n        env = envs[_j];\n        envConfig = (_ref1 = configPackage.environments) != null ? _ref1[env] : void 0;\n        if (envConfig) {\n          configsToMerge.push(envConfig);\n        }\n      }\n    }\n    extendr.safeDeepExtendPlainObjects.apply(extendr, configsToMerge);\n    return this;\n  };\n\n  DocPad.prototype.setInstanceConfig = function(instanceConfig) {\n    if (instanceConfig) {\n      extendr.safeDeepExtendPlainObjects(this.instanceConfig, instanceConfig);\n      if (this.config) {\n        extendr.safeDeepExtendPlainObjects(this.config, instanceConfig);\n      }\n    }\n    return this;\n  };\n\n  DocPad.prototype.setConfig = function(instanceConfig, next) {\n    var configPackages, configsToMerge, docpad, key, locale, postTasks, type, typePath, typePaths, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3,\n      _this = this;\n    _ref1 = extractOptsAndCallback(instanceConfig, next), instanceConfig = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    if (instanceConfig) {\n      this.setInstanceConfig(instanceConfig);\n    }\n    this.config.env = this.instanceConfig.env || this.websiteConfig.env || this.initialConfig.env || process.env.NODE_ENV;\n    configPackages = [this.initialConfig, this.userConfig, this.websiteConfig, this.instanceConfig];\n    configsToMerge = [this.config];\n    docpad.mergeConfigurations(configPackages, configsToMerge);\n    if (this.config.server) {\n      this.setServer(this.config.server);\n    }\n    this.setLogLevel(this.config.logLevel);\n    this.config.rootPath = pathUtil.resolve(this.config.rootPath);\n    this.config.outPath = pathUtil.resolve(this.config.rootPath, this.config.outPath);\n    this.config.srcPath = pathUtil.resolve(this.config.rootPath, this.config.srcPath);\n    _ref2 = ['documents', 'files', 'layouts'];\n    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n      type = _ref2[_i];\n      typePaths = this.config[type + 'Paths'];\n      for (key = _j = 0, _len1 = typePaths.length; _j < _len1; key = ++_j) {\n        typePath = typePaths[key];\n        typePaths[key] = pathUtil.resolve(this.config.srcPath, typePath);\n      }\n    }\n    _ref3 = ['plugins'];\n    for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {\n      type = _ref3[_k];\n      typePaths = this.config[type + 'Paths'];\n      for (key = _l = 0, _len3 = typePaths.length; _l < _len3; key = ++_l) {\n        typePath = typePaths[key];\n        typePaths[key] = pathUtil.resolve(this.config.rootPath, typePath);\n      }\n    }\n    process.removeListener('uncaughtException', this.error);\n    if (this.config.catchExceptions) {\n      process.setMaxListeners(0);\n      process.on('uncaughtException', this.error);\n    }\n    if (this.regenerateTimer) {\n      clearInterval(this.regenerateTimer);\n      this.regenerateTimer = null;\n    }\n    if (this.config.regenerateEvery) {\n      this.regenerateTimer = setInterval(function() {\n        docpad.log('info', locale.renderInterval);\n        return docpad.action('generate');\n      }, this.config.regenerateEvery);\n    }\n    postTasks = new TaskGroup().once('complete', function(err) {\n      return next(err, _this.config);\n    });\n    postTasks.addTask(function(complete) {\n      if (!_this.config.detectEncoding) {\n        return complete();\n      }\n      return lazyRequire('iconv', {\n        cwd: corePath\n      }, function(err) {\n        if (err) {\n          docpad.warn(locale.encodingLoadFailed);\n        }\n        return complete();\n      });\n    });\n    postTasks.addTask(function(complete) {\n      return docpad.loadPlugins(complete);\n    });\n    postTasks.addTask(function(complete) {\n      return _this.extendCollections(complete);\n    });\n    postTasks.addTask(function(complete) {\n      return _this.emitSerial('extendTemplateData', {\n        templateData: _this.pluginsTemplateData\n      }, complete);\n    });\n    postTasks.addTask(function(complete) {\n      return _this.emitSerial('docpadLoaded', {}, complete);\n    });\n    postTasks.run();\n    return this;\n  };\n\n  DocPad.prototype.load = function(instanceConfig, next) {\n    var docpad, locale, preTasks, _ref1,\n      _this = this;\n    _ref1 = extractOptsAndCallback(instanceConfig, next), instanceConfig = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    instanceConfig || (instanceConfig = {});\n    this.websitePackageConfig = {};\n    this.websiteConfig = {};\n    this.config = {};\n    this.setInstanceConfig(instanceConfig);\n    preTasks = new TaskGroup().once('complete', function(err) {\n      if (err) {\n        return next(err);\n      }\n      return _this.setConfig(next);\n    });\n    preTasks.addTask(function(complete) {\n      return safeps.getHomePath(function(err, homePath) {\n        var dropboxPath;\n        if (err) {\n          return complete(err);\n        }\n        dropboxPath = pathUtil.join(homePath, 'Dropbox');\n        return safefs.exists(dropboxPath, function(dropboxPathExists) {\n          var userConfigDirPath;\n          userConfigDirPath = dropboxPathExists ? dropboxPath : homePath;\n          _this.userConfigPath = pathUtil.join(userConfigDirPath, _this.userConfigPath);\n          return complete();\n        });\n      });\n    });\n    preTasks.addTask(function(complete) {\n      var configPath;\n      configPath = _this.userConfigPath;\n      docpad.log('debug', util.format(locale.loadingUserConfig, configPath));\n      return _this.loadConfigPath({\n        configPath: configPath\n      }, function(err, data) {\n        if (err) {\n          return complete(err);\n        }\n        extendr.extend(_this.userConfig, data || {});\n        docpad.log('debug', util.format(locale.loadingUserConfig, configPath));\n        return complete();\n      });\n    });\n    preTasks.addTask(function(complete) {\n      var configPath;\n      configPath = _this.packagePath;\n      docpad.log('debug', util.format(locale.loadingDocPadPackageConfig, configPath));\n      return _this.loadConfigPath({\n        configPath: configPath\n      }, function(err, data) {\n        if (err) {\n          return complete(err);\n        }\n        data || (data = {});\n        _this.version = data.version;\n        docpad.log('debug', util.format(locale.loadingDocPadPackageConfig, configPath));\n        return complete();\n      });\n    });\n    preTasks.addTask(function(complete) {\n      var configPath, rootPath;\n      rootPath = pathUtil.resolve(_this.instanceConfig.rootPath || _this.initialConfig.rootPath);\n      configPath = pathUtil.resolve(rootPath, _this.instanceConfig.packagePath || _this.initialConfig.packagePath);\n      docpad.log('debug', util.format(locale.loadingWebsitePackageConfig, configPath));\n      return _this.loadConfigPath({\n        configPath: configPath\n      }, function(err, data) {\n        if (err) {\n          return complete(err);\n        }\n        data || (data = {});\n        _this.websitePackageConfig = data;\n        docpad.log('debug', util.format(locale.loadedWebsitePackageConfig, configPath));\n        return complete();\n      });\n    });\n    preTasks.addTask(function(complete) {\n      var configPath, rootPath;\n      rootPath = pathUtil.resolve(_this.instanceConfig.rootPath || _this.websitePackageConfig.rootPath || _this.initialConfig.rootPath);\n      configPath = pathUtil.join(rootPath, '.env');\n      docpad.log('debug', util.format(locale.loadingEnvConfig, configPath));\n      return safefs.exists(configPath, function(exists) {\n        if (!exists) {\n          return complete();\n        }\n        return require('envfile').parseFile(configPath, function(err, data) {\n          var key, value;\n          if (err) {\n            return complete(err);\n          }\n          for (key in data) {\n            if (!__hasProp.call(data, key)) continue;\n            value = data[key];\n            process.env[key] = value;\n          }\n          docpad.log('debug', util.format(locale.loadingEnvConfig, configPath));\n          return complete();\n        });\n      });\n    });\n    preTasks.addTask(function(complete) {\n      var configPath, configPaths, index, rootPath, _i, _len;\n      docpad.log('debug', util.format(locale.loadingWebsiteConfig));\n      rootPath = pathUtil.resolve(_this.instanceConfig.rootPath || _this.initialConfig.rootPath);\n      configPaths = _this.instanceConfig.configPaths || _this.initialConfig.configPaths;\n      for (index = _i = 0, _len = configPaths.length; _i < _len; index = ++_i) {\n        configPath = configPaths[index];\n        configPaths[index] = pathUtil.resolve(rootPath, configPath);\n      }\n      return _this.loadConfigPath({\n        configPaths: configPaths\n      }, function(err, data) {\n        if (err) {\n          return complete(err);\n        }\n        data || (data = {});\n        extendr.extend(_this.websiteConfig, data);\n        docpad.log('debug', util.format(locale.loadedWebsiteConfig));\n        return complete();\n      });\n    });\n    preTasks.run();\n    return this;\n  };\n\n  DocPad.prototype.updateUserConfig = function(data, next) {\n    var docpad, userConfigPath, _ref1;\n    if (data == null) {\n      data = {};\n    }\n    _ref1 = extractOptsAndCallback(data, next), data = _ref1[0], next = _ref1[1];\n    docpad = this;\n    userConfigPath = this.userConfigPath;\n    if (data) {\n      extendr.extend(this.userConfig, data);\n    }\n    CSON.stringify(this.userConfig, function(err, userConfigString) {\n      if (err) {\n        return typeof next === \"function\" ? next(err) : void 0;\n      }\n      return safefs.writeFile(userConfigPath, userConfigString, 'utf8', function(err) {\n        return typeof next === \"function\" ? next(err) : void 0;\n      });\n    });\n    return this;\n  };\n\n  DocPad.prototype.loadConfigUrl = function(configUrl, next) {\n    var docpad, locale;\n    docpad = this;\n    locale = this.getLocale();\n    docpad.log('debug', util.format(locale.loadingConfigUrl, configUrl));\n    superAgent.get(configUrl).timeout(30 * 1000).end(function(err, res) {\n      if (err) {\n        return next(err);\n      }\n      return CSON.parse(res.text, next);\n    });\n    return this;\n  };\n\n  DocPad.prototype.loadConfigPath = function(opts, next) {\n    var docpad, load, locale, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    load = function(configPath) {\n      if (!configPath) {\n        return next();\n      }\n      docpad.log('debug', util.format(locale.loadingConfigPath, configPath));\n      return safefs.exists(configPath, function(exists) {\n        if (!exists) {\n          return next();\n        }\n        return CSON.parseFile(configPath, next);\n      });\n    };\n    if (opts.configPath) {\n      load(opts.configPath);\n    } else {\n      this.getConfigPath(opts, function(err, configPath) {\n        return load(configPath);\n      });\n    }\n    return this;\n  };\n\n  DocPad.prototype.getConfigPath = function(opts, next) {\n    var config, docpad, result, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    result = null;\n    if (opts.configPaths == null) {\n      opts.configPaths = config.configPaths;\n    }\n    if (!typeChecker.isArray(opts.configPaths)) {\n      opts.configPaths = [opts.configPaths];\n    }\n    tasks = new TaskGroup().once('complete', function(err) {\n      return next(err, result);\n    });\n    opts.configPaths.forEach(function(configPath) {\n      return tasks.addTask(function(complete) {\n        if (result) {\n          return complete();\n        }\n        return safefs.exists(configPath, function(exists) {\n          if (exists) {\n            result = configPath;\n            return tasks.exit();\n          } else {\n            return complete();\n          }\n        });\n      });\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.extendCollections = function(next) {\n    var database, docpad, docpadConfig, locale, tasks;\n    docpad = this;\n    docpadConfig = this.getConfig();\n    locale = this.getLocale();\n    database = this.getDatabase();\n    this.setCollections({\n      documents: database.createLiveChildCollection().setQuery('isDocument', {\n        render: true,\n        write: true\n      }).on('add', function(model) {\n        return docpad.log('debug', util.format(locale.addingDocument, model.getFilePath()));\n      }),\n      files: database.createLiveChildCollection().setQuery('isFile', {\n        render: false,\n        write: true\n      }).on('add', function(model) {\n        return docpad.log('debug', util.format(locale.addingFile, model.getFilePath()));\n      }),\n      layouts: database.createLiveChildCollection().setQuery('isLayout', {\n        $or: {\n          isLayout: true,\n          fullPath: {\n            $startsWith: docpadConfig.layoutsPaths\n          }\n        }\n      }).on('add', function(model) {\n        docpad.log('debug', util.format(locale.addingLayout, model.getFilePath()));\n        return model.setDefaults({\n          isLayout: true,\n          render: false,\n          write: false\n        });\n      }),\n      html: database.createLiveChildCollection().setQuery('isHTML', {\n        write: true,\n        outExtension: 'html'\n      }).on('add', function(model) {\n        return docpad.log('debug', util.format(locale.addingHtml, model.getFilePath()));\n      }),\n      stylesheet: database.createLiveChildCollection().setQuery('isStylesheet', {\n        write: true,\n        outExtension: {\n          $in: ['css', 'scss', 'sass', 'styl', 'stylus', 'less']\n        }\n      }).on('add', function(model) {\n        docpad.log('debug', util.format(locale.addingStylesheet, model.getFilePath()));\n        return model.setDefaults({\n          referencesOthers: true\n        });\n      })\n    });\n    this.setBlocks({\n      meta: new MetaCollection(),\n      scripts: new ScriptsCollection(),\n      styles: new StylesCollection()\n    });\n    tasks = new TaskGroup().setConfig({\n      concurrency: 0\n    }).once('complete', function(err) {\n      if (err) {\n        docpad.error(err);\n      }\n      return docpad.emitSerial('extendCollections', {}, next);\n    });\n    eachr(docpadConfig.collections || {}, function(fn, name) {\n      return tasks.addTask(function(complete) {\n        return ambi([fn.bind(docpad), fn], database, function(err, collection) {\n          if (err) {\n            docpad.error(err);\n            return complete();\n          } else if (!(collection instanceof QueryCollection)) {\n            docpad.log('warn', util.format(locale.errorInvalidCollection, name));\n            return complete();\n          }\n          if (collection) {\n            collection.live(true);\n          }\n          docpad.setCollection(name, collection);\n          return complete();\n        });\n      });\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.resetCollections = function(opts, next) {\n    var database, docpad, meta, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    database = docpad.getDatabase();\n    this.databaseCache = new FilesCollection(database.models);\n    database.reset([]);\n    meta = this.getBlock('meta').reset([]);\n    if (docpad.getConfig().poweredByDocPad !== false) {\n      meta.add(\"<meta http-equiv=\\\"X-Powered-By\\\" content=\\\"DocPad v\" + docpad.version + \"\\\"/>\");\n    }\n    this.getBlock('scripts').reset([]);\n    this.getBlock('styles').reset([]);\n    this.filesByUrl = {};\n    this.filesBySelector = {};\n    this.filesByOutPath = {};\n    next();\n    return this;\n  };\n\n  DocPad.prototype.populateCollections = function(opts, next) {\n    var database, docpad, docpadConfig, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    database = docpad.getDatabase();\n    docpadConfig = docpad.getConfig();\n    tasks = new TaskGroup().setConfig({\n      concurrency: 0\n    }).once('complete', function(err) {\n      if (err) {\n        return next(err);\n      }\n      return docpad.emitSerial('populateCollections', {}, next);\n    });\n    docpadConfig.documentsPaths.forEach(function(documentsPath) {\n      return tasks.addTask(function(complete) {\n        return docpad.parseDirectory({\n          modelType: 'document',\n          collection: database,\n          path: documentsPath,\n          next: complete\n        });\n      });\n    });\n    docpadConfig.filesPaths.forEach(function(filesPath) {\n      return tasks.addTask(function(complete) {\n        return docpad.parseDirectory({\n          modelType: 'file',\n          collection: database,\n          path: filesPath,\n          next: complete\n        });\n      });\n    });\n    docpadConfig.layoutsPaths.forEach(function(layoutsPath) {\n      return tasks.addTask(function(complete) {\n        return docpad.parseDirectory({\n          modelType: 'document',\n          collection: database,\n          path: layoutsPath,\n          next: complete\n        });\n      });\n    });\n    docpad.emitSerial('populateCollectionsBefore', {}, function(err) {\n      if (err) {\n        return next(err);\n      }\n      return tasks.run();\n    });\n    return this;\n  };\n\n  DocPad.prototype.initGitRepo = function(opts, next) {\n    var config, docpad, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    if (opts.cwd == null) {\n      opts.cwd = config.rootPath;\n    }\n    if (opts.output == null) {\n      opts.output = this.getDebugging();\n    }\n    safeps.initGitRepo(opts, next);\n    return this;\n  };\n\n  DocPad.prototype.initNodeModules = function(opts, next) {\n    var config, docpad, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    if (opts.cwd == null) {\n      opts.cwd = config.rootPath;\n    }\n    if (opts.output == null) {\n      opts.output = docpad.getDebugging();\n    }\n    if (opts.force == null) {\n      opts.force = config.offline ? false : true;\n    }\n    if (opts.args == null) {\n      opts.args = [];\n    }\n    if (config.force) {\n      opts.args.push('--force');\n    }\n    if (config.offline) {\n      opts.args.push('--no-registry');\n    }\n    if (opts.output) {\n      docpad.log('info', 'npm install');\n    }\n    safeps.initNodeModules(opts, next);\n    return this;\n  };\n\n  DocPad.prototype.initNodeModule = function(names, opts) {\n    var command, config, docpad, next, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    if (opts.cwd == null) {\n      opts.cwd = config.rootPath;\n    }\n    if (opts.output == null) {\n      opts.output = docpad.getDebugging();\n    }\n    if (opts.args == null) {\n      opts.args = [];\n    }\n    if (opts.save == null) {\n      opts.save = true;\n    }\n    if (opts.save === true) {\n      opts.save = '--save';\n    }\n    command = ['npm', 'install'];\n    if (!typeChecker.isArray(names)) {\n      names = names.split(/\\s/);\n    }\n    names.forEach(function(name) {\n      if (name.indexOf('@') === -1) {\n        name += '@latest';\n      }\n      return command.push(name);\n    });\n    command.push.apply(command, opts.args);\n    if (config.force) {\n      command.push('--force');\n    }\n    if (config.offline) {\n      command.push('--no-registry');\n    }\n    if (opts.save) {\n      command.push(opts.save);\n    }\n    if (opts.output) {\n      docpad.log('info', command.join(' '));\n    }\n    safeps.spawn(command, opts, next);\n    return this;\n  };\n\n  DocPad.prototype.setLogLevel = function(level) {\n    var loggers;\n    this.getLogger().setConfig({\n      level: level\n    });\n    if (level === 7) {\n      loggers = this.getLoggers();\n      if (loggers.debug == null) {\n        loggers.debug = loggers.logger.pipe(new (require('caterpillar-human').Human)({\n          color: false\n        })).pipe(require('fs').createWriteStream(this.debugLogPath));\n      }\n    }\n    return this;\n  };\n\n  DocPad.prototype.getLogLevel = function() {\n    return this.getConfig().logLevel;\n  };\n\n  DocPad.prototype.getDebugging = function() {\n    return this.getLogLevel() === 7;\n  };\n\n  DocPad.prototype.fatal = function(err) {\n    var config, docpad;\n    docpad = this;\n    config = this.getConfig();\n    if (!err) {\n      return this;\n    }\n    this.error(err, 'err', function() {\n      if (config.catchExceptions) {\n        return process.exit(-1);\n      } else {\n        throw err;\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.log = function() {\n    var args, logger;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    logger = this.getLogger();\n    logger.log.apply(logger, args);\n    return this;\n  };\n\n  DocPad.prototype.error = function(err, type, next) {\n    var config, data, docpad, locale, message, _ref1;\n    if (type == null) {\n      type = 'err';\n    }\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    if (!err || err.logged) {\n      if (typeof next === \"function\") {\n        next();\n      }\n      return this;\n    }\n    err.logged = true;\n    if (err.message == null) {\n      err = new Error(err);\n    }\n    err.logged = true;\n    message = ((_ref1 = err.stack) != null ? _ref1 : err.message).toString();\n    docpad.log(type, locale.errorOccured, '\\n' + message);\n    docpad.notify(err.message, {\n      title: locale.errorOccured\n    });\n    if (config.offline === false && config.reportErrors) {\n      data = {};\n      data.message = err.message;\n      if (err.stack) {\n        data.stack = err.stack.toString();\n      }\n      data.config = config;\n      data.env = process.env;\n      docpad.track('error', data, next);\n    }\n    return this;\n  };\n\n  DocPad.prototype.warn = function(message, err, next) {\n    var docpad, locale;\n    docpad = this;\n    locale = this.getLocale();\n    docpad.log('warn', message);\n    if (err) {\n      docpad.error(err, 'warn', next);\n    }\n    docpad.notify(message, {\n      title: locale.warnOccured\n    });\n    return this;\n  };\n\n  DocPad.prototype.notify = function(message, opts) {\n    var docpad, err, growl;\n    docpad = this;\n    growl = this.getGrowlInstance();\n    if (growl) {\n      try {\n        growl(message, opts);\n      } catch (_error) {\n        err = _error;\n      }\n    }\n    return this;\n  };\n\n  DocPad.prototype.checkRequest = function(next) {\n    return function(err, res) {\n      var _ref1, _ref2;\n      if (err) {\n        return next(err, res);\n      }\n      if (((_ref1 = res.body) != null ? _ref1.success : void 0) === false || ((_ref2 = res.body) != null ? _ref2.error : void 0)) {\n        err = new Error(res.body.error || 'unknown request error');\n        return next(err, res);\n      }\n      return next(null, res);\n    };\n  };\n\n  DocPad.prototype.subscribe = function(next) {\n    var data, helperUrl;\n    helperUrl = this.getConfig().helperUrl;\n    data = {};\n    data.name = this.userConfig.name;\n    data.email = this.userConfig.email;\n    data.username = this.userConfig.username;\n    superAgent.post(helperUrl).type('json').set('Accept', 'application/json').query({\n      method: 'add-subscriber'\n    }).send(data).timeout(30 * 1000).end(this.checkRequest(next));\n    return this;\n  };\n\n  DocPad.prototype.track = function(name, things, next) {\n    var config, data, docpad, _ref1, _ref2;\n    if (things == null) {\n      things = {};\n    }\n    docpad = this;\n    config = this.getConfig();\n    if (config.offline === false && config.reportStatistics && ((_ref1 = this.userConfig) != null ? _ref1.username : void 0)) {\n      data = {};\n      data.userId = this.userConfig.username;\n      data.event = name;\n      data.properties = things;\n      if ((_ref2 = this.websitePackageConfig) != null ? _ref2.name : void 0) {\n        things.websiteName = this.websitePackageConfig.name;\n      }\n      things.platform = this.getProcessPlatform();\n      things.environment = this.getEnvironment();\n      things.version = this.getVersion();\n      things.nodeVersion = this.getProcessVersion();\n      eachr(docpad.loadedPlugins, function(value, key) {\n        return things['plugin-' + key] = value.version || true;\n      });\n      docpad.getTrackRunner().addTask(function(complete) {\n        return superAgent.post(config.helperUrl).type('json').set('Accept', 'application/json').query({\n          method: 'analytics',\n          action: 'track'\n        }).send(data).timeout(30 * 1000).end(docpad.checkRequest(complete));\n      });\n    }\n    if (typeof next === \"function\") {\n      next();\n    }\n    return this;\n  };\n\n  DocPad.prototype.identify = function(next) {\n    var config, data, docpad, now, things, _ref1,\n      _this = this;\n    docpad = this;\n    config = this.getConfig();\n    if (config.offline === false && config.reportStatistics && ((_ref1 = this.userConfig) != null ? _ref1.username : void 0)) {\n      data = {};\n      data.userId = this.userConfig.username;\n      data.traits = things = {};\n      now = new Date();\n      things.username = this.userConfig.username;\n      things.email = this.userConfig.email;\n      things.name = this.userConfig.name;\n      things.lastLogin = now.toISOString();\n      things.lastSeen = now.toISOString();\n      things.countryCode = safeps.getCountryCode();\n      things.languageCode = safeps.getLanguageCode();\n      things.platform = this.getProcessPlatform();\n      things.version = this.getVersion();\n      things.nodeVersion = this.getProcessVersion();\n      if (docpad.userConfig.identified !== true) {\n        things.created = now.toISOString();\n        docpad.getTrackRunner().addTask(function(complete) {\n          var _this = this;\n          return superAgent.post(config.helperUrl).type('json').set('Accept', 'application/json').query({\n            method: 'analytics',\n            action: 'identify'\n          }).send(data).timeout(30 * 1000).end(docpad.checkRequest(function(err) {\n            docpad.updateUserConfig({\n              identified: true\n            });\n            return complete(err);\n          }));\n        });\n      } else {\n        docpad.getTrackRunner().addTask(function(complete) {\n          return superAgent.post(config.helperUrl).type('json').set('Accept', 'application/json').query({\n            method: 'analytics',\n            action: 'identify'\n          }).send(data).timeout(30 * 1000).end(docpad.checkRequest(complete));\n        });\n      }\n    }\n    if (typeof next === \"function\") {\n      next();\n    }\n    return this;\n  };\n\n  DocPad.prototype.createFile = function(attrs, opts) {\n    if (attrs == null) {\n      attrs = {};\n    }\n    if (opts == null) {\n      opts = {};\n    }\n    opts.modelType = 'file';\n    return this.createModel(attrs, opts);\n  };\n\n  DocPad.prototype.createDocument = function(attrs, opts) {\n    if (attrs == null) {\n      attrs = {};\n    }\n    if (opts == null) {\n      opts = {};\n    }\n    opts.modelType = 'document';\n    return this.createModel(attrs, opts);\n  };\n\n  DocPad.prototype.ensureFile = function(attrs, opts) {\n    if (attrs == null) {\n      attrs = {};\n    }\n    if (opts == null) {\n      opts = {};\n    }\n    opts.modelType = 'file';\n    return this.ensureModel(attrs, opts);\n  };\n\n  DocPad.prototype.ensureDocument = function(attrs, opts) {\n    if (attrs == null) {\n      attrs = {};\n    }\n    if (opts == null) {\n      opts = {};\n    }\n    opts.modelType = 'document';\n    return this.ensureModel(attrs, opts);\n  };\n\n  DocPad.prototype.ensureFileOrDocument = function(attrs, opts) {\n    if (attrs == null) {\n      attrs = {};\n    }\n    if (opts == null) {\n      opts = {};\n    }\n    return this.ensureModel(attrs, opts);\n  };\n\n  DocPad.prototype.parseFileDirectory = function(opts, next) {\n    if (opts == null) {\n      opts = {};\n    }\n    if (opts.modelType == null) {\n      opts.modelType = 'file';\n    }\n    if (opts.collection == null) {\n      opts.collection = this.getDatabase();\n    }\n    return this.parseDirectory(opts, next);\n  };\n\n  DocPad.prototype.parseDocumentDirectory = function(opts, next) {\n    if (opts == null) {\n      opts = {};\n    }\n    if (opts.modelType == null) {\n      opts.modelType = 'document';\n    }\n    if (opts.collection == null) {\n      opts.collection = this.getDatabase();\n    }\n    return this.parseDirectory(opts, next);\n  };\n\n  DocPad.prototype.attachModelEvents = function(model) {\n    var docpad;\n    docpad = this;\n    if (model.type === 'document') {\n      model.on('render', function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return docpad.emitSerial.apply(docpad, ['render'].concat(__slice.call(args)));\n      });\n      model.on('renderDocument', function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return docpad.emitSerial.apply(docpad, ['renderDocument'].concat(__slice.call(args)));\n      });\n      model.on('getLayout', function(opts, next) {\n        var layout;\n        if (opts == null) {\n          opts = {};\n        }\n        opts.collection = docpad.getCollection('layouts');\n        layout = docpad.getFileBySelector(opts.selector, opts);\n        return next(null, {\n          layout: layout\n        });\n      });\n    }\n    model.on('log', function() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return docpad.log.apply(docpad, args);\n    });\n    return this;\n  };\n\n  DocPad.prototype.cloneModel = function(model) {\n    var clone;\n    clone = model.clone();\n    this.attachModelEvents(clone);\n    return clone;\n  };\n\n  DocPad.prototype.ensureModel = function(attrs, opts) {\n    var database, result;\n    if (attrs == null) {\n      attrs = {};\n    }\n    if (opts == null) {\n      opts = {};\n    }\n    database = this.getDatabase();\n    result = database.findOne({\n      fullPath: attrs.fullPath\n    });\n    if (!result) {\n      result = this.createModel(attrs, opts);\n      database.add(result);\n    }\n    return result;\n  };\n\n  DocPad.prototype.createModel = function(attrs, opts) {\n    var config, database, dirPath, docpad, fileFullPath, model, _i, _j, _len, _len1, _ref1, _ref2;\n    if (attrs == null) {\n      attrs = {};\n    }\n    if (opts == null) {\n      opts = {};\n    }\n    docpad = this;\n    config = this.getConfig();\n    database = this.getDatabase();\n    fileFullPath = attrs.fullPath || null;\n    if (fileFullPath) {\n      if (!opts.modelType) {\n        _ref1 = config.documentsPaths.concat(config.layoutsPaths);\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          dirPath = _ref1[_i];\n          if (fileFullPath.indexOf(dirPath) === 0) {\n            attrs.relativePath || (attrs.relativePath = fileFullPath.replace(dirPath, '').replace(/^[\\/\\\\]/, ''));\n            opts.modelType = 'document';\n            break;\n          }\n        }\n      }\n      if (!opts.modelType) {\n        _ref2 = config.filesPaths;\n        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n          dirPath = _ref2[_j];\n          if (fileFullPath.indexOf(dirPath) === 0) {\n            attrs.relativePath || (attrs.relativePath = fileFullPath.replace(dirPath, '').replace(/^[\\/\\\\]/, ''));\n            opts.modelType = 'file';\n            break;\n          }\n        }\n      }\n    }\n    opts = extendr.extend({\n      detectEncoding: config.detectEncoding,\n      rootOutDirPath: config.outPath\n    }, opts);\n    if (opts.modelType === 'file') {\n      model = new FileModel(attrs, opts);\n    } else {\n      model = new DocumentModel(attrs, opts);\n    }\n    this.attachModelEvents(model);\n    return model;\n  };\n\n  DocPad.prototype.parseDirectory = function(opts, next) {\n    var createFunction, docpad, files, locale, path, _ref1;\n    if (opts == null) {\n      opts = {};\n    }\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    path = opts.path, createFunction = opts.createFunction;\n    if (createFunction == null) {\n      createFunction = this.createModel;\n    }\n    files = opts.collection || new FilesCollection();\n    safefs.exists(path, function(exists) {\n      if (!exists) {\n        docpad.log('debug', util.format(locale.renderDirectoryNonexistant, path));\n        return next();\n      }\n      docpad.log('debug', util.format(locale.renderDirectoryParsing, path));\n      return docpad.scandir({\n        path: path,\n        fileAction: function(fileFullPath, fileRelativePath, nextFile, fileStat) {\n          var data, file;\n          data = {\n            fullPath: fileFullPath,\n            relativePath: fileRelativePath,\n            stat: fileStat\n          };\n          file = createFunction.call(docpad, data, opts);\n          files.add(file);\n          return nextFile();\n        },\n        next: function(err) {\n          if (err) {\n            return next(err);\n          }\n          docpad.log('debug', util.format(locale.renderDirectoryParsed, path));\n          return next(null, files);\n        }\n      });\n    });\n    return this;\n  };\n\n  DocPad.prototype.getPlugin = function(pluginName) {\n    return this.loadedPlugins[pluginName];\n  };\n\n  DocPad.prototype.hasPlugins = function() {\n    return typeChecker.isEmptyObject(this.loadedPlugins) === false;\n  };\n\n  DocPad.prototype.loadPlugins = function(next) {\n    var docpad, locale, snore, tasks;\n    docpad = this;\n    locale = this.getLocale();\n    this.slowPlugins = {};\n    snore = balUtil.createSnore(function() {\n      return docpad.log('notice', util.format(locale.pluginsSlow, Object.keys(docpad.slowPlugins).join(', ')));\n    });\n    tasks = new TaskGroup().setConfig({\n      concurrency: 0\n    }).once('complete', function(err) {\n      docpad.slowPlugins = {};\n      snore.clear();\n      return next(err);\n    });\n    (this.config.pluginsPaths || []).forEach(function(pluginsPath) {\n      return tasks.addTask(function(complete) {\n        return safefs.exists(pluginsPath, function(exists) {\n          if (!exists) {\n            return complete();\n          }\n          return docpad.loadPluginsIn(pluginsPath, complete);\n        });\n      });\n    });\n    (this.config.pluginPaths || []).forEach(function(pluginPath) {\n      return tasks.addTask(function(complete) {\n        return safefs.exists(pluginPath, function(exists) {\n          if (!exists) {\n            return complete();\n          }\n          return docpad.loadPlugin(pluginPath, complete);\n        });\n      });\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.loadedPlugin = function(pluginName, next) {\n    var docpad, loaded;\n    docpad = this;\n    loaded = docpad.loadedPlugins[pluginName] != null;\n    next(null, loaded);\n    return this;\n  };\n\n  DocPad.prototype.loadPlugin = function(fileFullPath, _next) {\n    var config, docpad, enabled, loader, locale, next, pluginName;\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    next = function(err) {\n      delete docpad.slowPlugins[pluginName];\n      return _next(err);\n    };\n    loader = new PluginLoader({\n      dirPath: fileFullPath,\n      docpad: this,\n      BasePlugin: BasePlugin\n    });\n    pluginName = loader.pluginName;\n    enabled = (config.enableUnlistedPlugins && (config.enabledPlugins[pluginName] != null) === false) || config.enabledPlugins[pluginName] === true;\n    if (docpad.loadedPlugins[pluginName] != null) {\n      docpad.loadedPlugins[pluginName].setConfig();\n      return _next();\n    }\n    docpad.slowPlugins[pluginName] = true;\n    if (!enabled) {\n      docpad.log('debug', util.format(locale.pluginSkipped, pluginName));\n      return next();\n    } else {\n      docpad.log('debug', util.format(locale.pluginLoading, pluginName));\n      loader.exists(function(err, exists) {\n        if (err || !exists) {\n          return next(err);\n        }\n        return loader.unsupported(function(err, unsupported) {\n          if (err) {\n            return next(err);\n          }\n          if (unsupported) {\n            if ((unsupported === 'version-docpad' || unsupported === 'version-pugin') && config.skipUnsupportedPlugins === false) {\n              docpad.log('warn', util.format(locale.pluginContinued, pluginName));\n            } else {\n              if (unsupported === 'type') {\n                docpad.log('debug', util.format(locale.pluginSkippedDueTo, pluginName, unsupported));\n              } else {\n                docpad.log('warn', util.format(locale.pluginSkippedDueTo, pluginName, unsupported));\n              }\n              return next();\n            }\n          }\n          return loader.load(function(err) {\n            if (err) {\n              return next(err);\n            }\n            return loader.create({}, function(err, pluginInstance) {\n              if (err) {\n                return next(err);\n              }\n              docpad.loadedPlugins[loader.pluginName] = pluginInstance;\n              docpad.log('debug', util.format(locale.pluginLoaded, pluginName));\n              return next();\n            });\n          });\n        });\n      });\n    }\n    return this;\n  };\n\n  DocPad.prototype.loadPluginsIn = function(pluginsPath, next) {\n    var docpad, locale;\n    docpad = this;\n    locale = this.getLocale();\n    docpad.log('debug', util.format(locale.pluginsLoadingFor, pluginsPath));\n    this.scandir({\n      path: pluginsPath,\n      fileAction: false,\n      dirAction: function(fileFullPath, fileRelativePath, _nextFile) {\n        var nextFile, pluginName;\n        pluginName = pathUtil.basename(fileFullPath);\n        if (fileFullPath === pluginsPath) {\n          return _nextFile(null, false);\n        }\n        nextFile = function(err, skip) {\n          var message;\n          if (err) {\n            message = util.format(locale.pluginFailedToLoad, pluginName, fileFullPath) + ' ' + locale.errorFollows;\n            docpad.warn(message, err);\n          }\n          return _nextFile(null, skip);\n        };\n        return docpad.loadPlugin(fileFullPath, function(err) {\n          return nextFile(err, true);\n        });\n      },\n      next: function(err) {\n        docpad.log('debug', util.format(locale.pluginsLoadedFor, pluginsPath));\n        return next(err);\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.compareVersion = function() {\n    var config, docpad, locale;\n    docpad = this;\n    config = this.getConfig();\n    if (config.offline || !config.checkVersion) {\n      return this;\n    }\n    docpad = this;\n    locale = this.getLocale();\n    balUtil.packageCompare({\n      local: this.packagePath,\n      remote: config.latestPackageUrl,\n      newVersionCallback: function(details) {\n        docpad.notify(locale.upgradeNotification);\n        return docpad.log('notice', util.format(locale.upgradeDetails, details.local.version, details.remote.version, details.local.upgradeUrl || details.remote.installUrl || details.remote.homepage));\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.getExchange = function(next) {\n    var config, docpad, exchangeUrl, locale;\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    if (typeChecker.isEmptyObject(docpad.exchange) === false) {\n      return next(null, docpad.exchange);\n    }\n    if (config.offline) {\n      return next(null, null);\n    }\n    docpad.log('info', locale.exchangeUpdate + ' ' + locale.pleaseWait);\n    exchangeUrl = config.exchangeUrl + '?version=' + this.version;\n    docpad.loadConfigUrl(exchangeUrl, function(err, parsedData) {\n      if (err) {\n        locale = docpad.getLocale();\n        docpad.log('notice', locale.exchangeError + ' ' + locale.errorFollows, err);\n        return next();\n      }\n      docpad.log('info', locale.exchangeUpdated);\n      docpad.exchange = parsedData;\n      return next(null, parsedData);\n    });\n    return this;\n  };\n\n  DocPad.prototype.loadFiles = function(opts, next) {\n    var collection, config, database, docpad, locale, slowFilesObject, slowFilesTimer;\n    if (opts == null) {\n      opts = {};\n    }\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    database = this.getDatabase();\n    collection = opts.collection;\n    slowFilesObject = {};\n    slowFilesTimer = null;\n    docpad.log('debug', util.format(locale.loadingFiles, collection.length));\n    docpad.emitSerial('parseBefore', {\n      collection: collection\n    }, function(err) {\n      var tasks, _ref1;\n      if (err) {\n        return next(err);\n      }\n      tasks = new TaskGroup().setConfig({\n        concurrency: 0\n      }).once('complete', function(err) {\n        clearInterval(slowFilesTimer);\n        slowFilesTimer = null;\n        if (err) {\n          return next(err);\n        }\n        return docpad.emitSerial('parseAfter', {\n          collection: collection\n        }, function(err) {\n          if (err) {\n            return next(err);\n          }\n          docpad.log('debug', util.format(locale.loadedFiles, collection.length));\n          return next();\n        });\n      });\n      if ((_ref1 = opts.progress) != null) {\n        _ref1.step('loadFiles').total(collection.length);\n      }\n      collection.forEach(function(file) {\n        slowFilesObject[file.id] = file.get('relativePath') || file.id;\n        return tasks.addTask(function(complete) {\n          var filePath;\n          filePath = file.getFilePath();\n          return file.load(function(err) {\n            var fileIgnored, fileParse, _ref2;\n            delete slowFilesObject[file.id];\n            if ((_ref2 = opts.progress) != null) {\n              _ref2.tick();\n            }\n            if (err) {\n              docpad.warn(util.format(locale.loadingFileFailed, filePath) + ' ' + locale.errorFollows, err);\n              return complete();\n            }\n            fileIgnored = file.get('ignored');\n            fileParse = file.get('parse');\n            if (fileIgnored || ((fileParse != null) && !fileParse)) {\n              docpad.log('info', util.format(locale.loadingFileIgnored, filePath));\n              collection.remove(file);\n              database.remove(file);\n              return complete();\n            }\n            database.add(file);\n            return complete();\n          });\n        });\n      });\n      slowFilesTimer = setInterval(function() {\n        var key, slowFilesArray, value;\n        slowFilesArray = (function() {\n          var _results;\n          _results = [];\n          for (key in slowFilesObject) {\n            if (!__hasProp.call(slowFilesObject, key)) continue;\n            value = slowFilesObject[key];\n            _results.push(value || key);\n          }\n          return _results;\n        })();\n        return docpad.log('info', util.format(locale.slowFiles, 'loadFiles') + ' \\n' + slowFilesArray.join('\\n'));\n      }, config.slowFilesDelay);\n      return tasks.run();\n    });\n    return this;\n  };\n\n  DocPad.prototype.contextualizeFiles = function(opts, next) {\n    var collection, config, docpad, locale, slowFilesObject, slowFilesTimer, templateData;\n    if (opts == null) {\n      opts = {};\n    }\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    collection = opts.collection, templateData = opts.templateData;\n    slowFilesObject = {};\n    slowFilesTimer = null;\n    docpad.log('debug', util.format(locale.contextualizingFiles, collection.length));\n    docpad.emitSerial('contextualizeBefore', {\n      collection: collection,\n      templateData: templateData\n    }, function(err) {\n      var tasks, _ref1;\n      if (err) {\n        return next(err);\n      }\n      tasks = new TaskGroup().setConfig({\n        concurrency: 0\n      }).once('complete', function(err) {\n        clearInterval(slowFilesTimer);\n        slowFilesTimer = null;\n        if (err) {\n          return next(err);\n        }\n        return docpad.emitSerial('contextualizeAfter', {\n          collection: collection\n        }, function(err) {\n          if (err) {\n            return next(err);\n          }\n          docpad.log('debug', util.format(locale.contextualizedFiles, collection.length));\n          return next();\n        });\n      });\n      if ((_ref1 = opts.progress) != null) {\n        _ref1.step('contextualizeFiles').total(collection.length);\n      }\n      collection.forEach(function(file, index) {\n        slowFilesObject[file.id] = file.get('relativePath') || file.id;\n        return tasks.addTask(function(complete) {\n          return file.contextualize(function(err) {\n            var _ref2;\n            delete slowFilesObject[file.id];\n            if ((_ref2 = opts.progress) != null) {\n              _ref2.tick();\n            }\n            return complete(err);\n          });\n        });\n      });\n      slowFilesTimer = setInterval(function() {\n        var key, slowFilesArray, value;\n        slowFilesArray = (function() {\n          var _results;\n          _results = [];\n          for (key in slowFilesObject) {\n            if (!__hasProp.call(slowFilesObject, key)) continue;\n            value = slowFilesObject[key];\n            _results.push(value || key);\n          }\n          return _results;\n        })();\n        return docpad.log('info', util.format(locale.slowFiles, 'contextualizeFiles') + ' \\n' + slowFilesArray.join('\\n'));\n      }, config.slowFilesDelay);\n      return tasks.run();\n    });\n    return this;\n  };\n\n  DocPad.prototype.renderFiles = function(opts, next) {\n    var collection, config, docpad, locale, renderCollection, renderFile, renderPasses, slowFilesObject, slowFilesTimer, templateData,\n      _this = this;\n    if (opts == null) {\n      opts = {};\n    }\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    collection = opts.collection, templateData = opts.templateData, renderPasses = opts.renderPasses;\n    slowFilesObject = {};\n    slowFilesTimer = null;\n    docpad.log('debug', util.format(locale.renderingFiles, collection.length));\n    renderFile = function(fileToRender, next) {\n      var dynamic, relativePath, render;\n      dynamic = fileToRender.get('dynamic');\n      render = fileToRender.get('render');\n      relativePath = fileToRender.get('relativePath');\n      if (dynamic || ((render != null) && !render) || !relativePath || (fileToRender.render != null) === false) {\n        next();\n      } else {\n        fileToRender.render({\n          templateData: templateData\n        }, next);\n      }\n      return fileToRender;\n    };\n    renderCollection = function(collectionToRender, _arg, next) {\n      var renderPass, step, subTasks, _ref1;\n      renderPass = _arg.renderPass;\n      subTasks = new TaskGroup().setConfig({\n        concurrency: 0\n      }).once('complete', next);\n      step = \"renderFiles (pass \" + renderPass + \")\";\n      if ((_ref1 = opts.progress) != null) {\n        _ref1.step(step).total(collectionToRender.length);\n      }\n      collectionToRender.forEach(function(file) {\n        slowFilesObject[file.id] = file.get('relativePath');\n        return subTasks.addTask(function(complete) {\n          return renderFile(file, function(err) {\n            var _ref2;\n            delete slowFilesObject[file.id] || file.id;\n            if ((_ref2 = opts.progress) != null) {\n              _ref2.tick();\n            }\n            return complete(err);\n          });\n        });\n      });\n      subTasks.run();\n      return collectionToRender;\n    };\n    docpad.emitSerial('renderBefore', {\n      collection: collection,\n      templateData: templateData\n    }, function(err) {\n      var initialCollection, subsequentCollection, tasks, _i, _results;\n      if (err) {\n        return next(err);\n      }\n      tasks = new TaskGroup().once('complete', function(err) {\n        clearInterval(slowFilesTimer);\n        slowFilesTimer = null;\n        if (err) {\n          return next(err);\n        }\n        return docpad.emitSerial('renderAfter', {\n          collection: collection\n        }, function(err) {\n          if (err) {\n            return next(err);\n          }\n          docpad.log('debug', util.format(locale.renderedFiles, collection.length));\n          return next();\n        });\n      });\n      initialCollection = collection.findAll({\n        'referencesOthers': false\n      });\n      subsequentCollection = null;\n      tasks.addTask(function(complete) {\n        return renderCollection(initialCollection, {\n          renderPass: 1\n        }, function(err) {\n          if (err) {\n            return complete(err);\n          }\n          subsequentCollection = collection.findAll({\n            'referencesOthers': true\n          });\n          return renderCollection(subsequentCollection, {\n            renderPass: 2\n          }, complete);\n        });\n      });\n      if (renderPasses > 1) {\n        (function() {\n          _results = [];\n          for (var _i = 3; 3 <= renderPasses ? _i <= renderPasses : _i >= renderPasses; 3 <= renderPasses ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this).forEach(function(renderPass) {\n          return tasks.addTask(function(complete) {\n            return renderCollection(subsequentCollection, {\n              renderPass: renderPass\n            }, complete);\n          });\n        });\n      }\n      slowFilesTimer = setInterval(function() {\n        var key, slowFilesArray, value;\n        slowFilesArray = (function() {\n          var _results1;\n          _results1 = [];\n          for (key in slowFilesObject) {\n            if (!__hasProp.call(slowFilesObject, key)) continue;\n            value = slowFilesObject[key];\n            _results1.push(value || key);\n          }\n          return _results1;\n        })();\n        return docpad.log('info', util.format(locale.slowFiles, 'renderFiles') + ' \\n' + slowFilesArray.join('\\n'));\n      }, config.slowFilesDelay);\n      return tasks.run();\n    });\n    return this;\n  };\n\n  DocPad.prototype.writeFiles = function(opts, next) {\n    var collection, config, docpad, locale, slowFilesObject, slowFilesTimer, templateData,\n      _this = this;\n    if (opts == null) {\n      opts = {};\n    }\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    collection = opts.collection, templateData = opts.templateData;\n    slowFilesObject = {};\n    slowFilesTimer = null;\n    docpad.log('debug', util.format(locale.writingFiles, collection.length));\n    docpad.emitSerial('writeBefore', {\n      collection: collection,\n      templateData: templateData\n    }, function(err) {\n      var tasks, _ref1;\n      if (err) {\n        return next(err);\n      }\n      tasks = new TaskGroup().setConfig({\n        concurrency: 0\n      }).once('complete', function(err) {\n        clearInterval(slowFilesTimer);\n        slowFilesTimer = null;\n        if (err) {\n          return next(err);\n        }\n        return docpad.emitSerial('writeAfter', {\n          collection: collection\n        }, function(err) {\n          if (err) {\n            return next(err);\n          }\n          return next();\n        });\n      });\n      if ((_ref1 = opts.progress) != null) {\n        _ref1.step('writeFiles').total(collection.length);\n      }\n      collection.forEach(function(file, index) {\n        return tasks.addTask(function(complete) {\n          var fileTasks;\n          slowFilesObject[file.id] = file.get('relativePath');\n          fileTasks = new TaskGroup().setConfig({\n            concurrency: 0\n          }).once('complete', function(err) {\n            var _ref2;\n            delete slowFilesObject[file.id];\n            if ((_ref2 = opts.progress) != null) {\n              _ref2.tick();\n            }\n            return complete(err);\n          });\n          if (file.get('write') !== false && file.get('dynamic') !== true && file.get('outPath')) {\n            fileTasks.addTask(function(complete) {\n              return file.write(complete);\n            });\n          }\n          if (file.get('writeSource') === true && file.get('fullPath')) {\n            fileTasks.addTask(function(complete) {\n              return file.writeSource(complete);\n            });\n          }\n          return fileTasks.run();\n        });\n      });\n      slowFilesTimer = setInterval(function() {\n        var key, slowFilesArray, value;\n        slowFilesArray = (function() {\n          var _results;\n          _results = [];\n          for (key in slowFilesObject) {\n            if (!__hasProp.call(slowFilesObject, key)) continue;\n            value = slowFilesObject[key];\n            _results.push(value || key);\n          }\n          return _results;\n        })();\n        return docpad.log('info', util.format(locale.slowFiles, 'writeFiles') + ' \\n' + slowFilesArray.join('\\n'));\n      }, config.slowFilesDelay);\n      return tasks.run();\n    });\n    return this;\n  };\n\n  DocPad.prototype.action = function(action, opts, next) {\n    var actions, docpad, forward, locale, runner, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    runner = this.getActionRunner();\n    locale = this.getLocale();\n    if (typeChecker.isArray(action)) {\n      actions = action;\n    } else {\n      actions = action.split(/[,\\s]+/g);\n    }\n    actions = _.uniq(_.compact(actions));\n    if (actions.length === 1) {\n      action = actions[0];\n    } else {\n      tasks = new TaskGroup().once('complete', function(err) {\n        return next(err);\n      });\n      actions.forEach(function(action) {\n        return tasks.addTask(function(complete) {\n          return docpad.action(action, opts, complete);\n        });\n      });\n      tasks.run();\n      return docpad;\n    }\n    docpad.log('debug', util.format(locale.actionStart, action));\n    if (next == null) {\n      next = function(err) {\n        if (err) {\n          return docpad.fatal(err);\n        }\n      };\n    }\n    forward = function() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      docpad.log('debug', util.format(locale.actionFinished, action));\n      return process.nextTick(function() {\n        return next.apply(null, args);\n      });\n    };\n    runner.addTask(function(complete) {\n      var fn;\n      fn = docpad[action];\n      if (!fn) {\n        return complete(new Error(util.format(locale.actionNonexistant, action)));\n      }\n      docpad.track(action);\n      return fn(opts, function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        forward.apply(null, args);\n        return complete();\n      });\n    });\n    return this;\n  };\n\n  DocPad.prototype.generateStarted = null;\n\n  DocPad.prototype.generateEnded = null;\n\n  DocPad.prototype.generating = false;\n\n  DocPad.prototype.progress = null;\n\n  DocPad.prototype.createProgress = function() {\n    var config, docpad, progress;\n    docpad = this;\n    config = docpad.getConfig();\n    progress = null;\n    if (config.prompts && this.getLogLevel() === 6) {\n      progress = require('progressbar').create();\n      this.getLoggers().console.unpipe(process.stdout);\n      this.getLogger().once('log', progress.logListener != null ? progress.logListener : progress.logListener = function(data) {\n        if (data.levelNumber <= 5) {\n          return docpad.destroyProgress(progress);\n        }\n      });\n    }\n    return progress;\n  };\n\n  DocPad.prototype.destroyProgress = function(progress) {\n    if (progress) {\n      progress.finish();\n      this.getLoggers().console.unpipe(process.stdout).pipe(process.stdout);\n    }\n    return progress;\n  };\n\n  DocPad.prototype.generatePrepare = function(opts, next) {\n    var config, docpad, generateStarted, locale, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = docpad.getConfig();\n    locale = docpad.getLocale();\n    generateStarted = docpad.generateStarted;\n    docpad.generateStarted = new Date();\n    docpad.generating = true;\n    docpad.log('info', locale.renderGenerating);\n    docpad.notify((new Date()).toLocaleTimeString(), {\n      title: locale.renderGeneratingNotification\n    });\n    tasks = new TaskGroup().once('complete', next);\n    if (opts.reset === true) {\n      if (!docpad.hasPlugins()) {\n        docpad.log('notice', locale.renderNoPlugins);\n      }\n      tasks.addTask(function(complete) {\n        return safefs.exists(config.srcPath, function(exists) {\n          var err;\n          if (!exists) {\n            err = new Error(locale.renderNonexistant);\n            return complete(err);\n          }\n          return complete();\n        });\n      });\n      tasks.addTask(function(complete) {\n        return docpad.resetCollections(complete);\n      });\n      tasks.addTask(function(complete) {\n        return docpad.populateCollections(complete);\n      });\n      tasks.addTask(function() {\n        return opts.collection != null ? opts.collection : opts.collection = new FilesCollection().add(docpad.getDatabase().models);\n      });\n    } else {\n      tasks.addTask(function() {\n        return opts.collection != null ? opts.collection : opts.collection = new FilesCollection().add(docpad.getDatabase().findAll({\n          mtime: {\n            $gte: generateStarted\n          }\n        }).models);\n      });\n    }\n    tasks.addTask(function(complete) {\n      return docpad.emitSerial('generateBefore', {\n        reset: opts.reset,\n        server: docpad.getServer()\n      }, complete);\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.generateLoad = function(opts, next) {\n    var database, docpad, locale, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = docpad.getLocale();\n    database = docpad.getDatabase();\n    docpad.loadFiles({\n      collection: opts.collection\n    }, function(err) {\n      var addLayoutChildren, allStandalone, referencesOthersCollection, standalones;\n      if (err) {\n        return next(err);\n      }\n      standalones = opts.collection.pluck('standalone');\n      allStandalone = standalones.indexOf(false) === -1;\n      if (allStandalone === false) {\n        referencesOthersCollection = database.findAll({\n          referencesOthers: true\n        });\n        opts.collection.add(referencesOthersCollection.models);\n      }\n      addLayoutChildren = function(collection) {\n        return collection.forEach(function(fileToRender) {\n          var layoutChildren;\n          if (fileToRender.get('isLayout')) {\n            layoutChildren = database.findAll({\n              layoutId: fileToRender.id\n            });\n            addLayoutChildren(layoutChildren);\n            return opts.collection.add(layoutChildren.models);\n          }\n        });\n      };\n      addLayoutChildren(opts.collection);\n      return next();\n    });\n    return this;\n  };\n\n  DocPad.prototype.generateRender = function(opts, next) {\n    var docpad, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    opts.templateData || (opts.templateData = this.getTemplateData());\n    opts.renderPasses || (opts.renderPasses = this.getConfig().renderPasses);\n    balUtil.flow({\n      object: docpad,\n      action: 'contextualizeFiles renderFiles writeFiles',\n      args: [opts],\n      next: function(err) {\n        return next(err);\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.generatePostpare = function(opts, next) {\n    var collection, database, docpad, locale, server, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = docpad.getLocale();\n    database = docpad.getDatabase();\n    server = docpad.getServer();\n    collection = opts.collection;\n    docpad.generating = false;\n    docpad.generateEnded = new Date();\n    docpad.databaseCache = null;\n    docpad.emitSerial('generateAfter', {\n      server: server\n    }, function(err) {\n      var howMany, seconds, _ref2;\n      if (err) {\n        return next(err);\n      }\n      seconds = (docpad.generateEnded - docpad.generateStarted) / 1000;\n      howMany = \"\" + collection.length + \"/\" + database.length;\n      if ((_ref2 = opts.progress) != null) {\n        _ref2.finish();\n      }\n      docpad.log('info', util.format(locale.renderGenerated, howMany, seconds));\n      docpad.notify((new Date()).toLocaleTimeString(), {\n        title: locale.renderGeneratedNotification\n      });\n      return next();\n    });\n    return this;\n  };\n\n  DocPad.prototype.generate = function(opts, next) {\n    var config, docpad, finish, locale, _ref1, _ref2;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = docpad.getConfig();\n    locale = docpad.getLocale();\n    if (opts.reset == null) {\n      opts.reset = true;\n    }\n    if (((_ref2 = opts.collection) != null ? _ref2.length : void 0) === 0) {\n      return next();\n    }\n    if (opts.progress == null) {\n      opts.progress = this.createProgress();\n    }\n    finish = function(err) {\n      if (opts.progress) {\n        docpad.destroyProgress(opts.progress);\n        opts.progress = null;\n      }\n      return next(err);\n    };\n    balUtil.flow({\n      object: docpad,\n      action: 'generatePrepare generateLoad generateRender generatePostpare',\n      args: [opts],\n      next: function(err) {\n        return finish(err);\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.flowDocument = function(document, opts, next) {\n    var _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    balUtil.flow({\n      object: document,\n      action: opts.action,\n      args: [opts],\n      next: function(err) {\n        return typeof next === \"function\" ? next(err, document) : void 0;\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.loadDocument = function(document, opts, next) {\n    var _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    opts.action || (opts.action = 'load contextualize');\n    this.flowDocument(document, opts, next);\n    return this;\n  };\n\n  DocPad.prototype.loadAndRenderDocument = function(document, opts, next) {\n    var _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    opts.action || (opts.action = 'load contextualize render');\n    this.flowDocument(document, opts, function(err) {\n      var result;\n      result = document.getOutContent();\n      return typeof next === \"function\" ? next(err, result, document) : void 0;\n    });\n    return this;\n  };\n\n  DocPad.prototype.renderDocument = function(document, opts, next) {\n    var _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    document.render(opts, next);\n    return this;\n  };\n\n  DocPad.prototype.renderPath = function(path, opts, next) {\n    var attributes, document, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    attributes = extendr.extend({\n      fullPath: path\n    }, opts.attributes);\n    document = this.ensureDocument(attributes);\n    this.loadAndRenderDocument(document, opts, next);\n    return this;\n  };\n\n  DocPad.prototype.renderData = function(content, opts, next) {\n    var attributes, document, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    attributes = extendr.extend({\n      filename: opts.filename,\n      data: content\n    }, opts.attributes);\n    document = this.createDocument(attributes);\n    this.loadAndRenderDocument(document, opts, next);\n    return this;\n  };\n\n  DocPad.prototype.renderText = function(text, opts, next) {\n    var attributes, document, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    if (opts.actions == null) {\n      opts.actions = ['renderExtensions', 'renderDocument'];\n    }\n    attributes = extendr.extend({\n      filename: opts.filename,\n      data: text,\n      body: text,\n      content: text\n    }, opts.attributes);\n    document = this.createDocument(attributes);\n    balUtil.flow({\n      object: document,\n      action: 'normalize contextualize render',\n      args: [opts],\n      next: function(err) {\n        var result;\n        result = document.getOutContent();\n        return next(err, result, document);\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.render = function(opts, next) {\n    var err, locale, path, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    locale = this.getLocale();\n    if (opts.document) {\n      this.renderDocument(opts.document, opts, next);\n    } else if (opts.data) {\n      this.renderData(opts.data, opts, next);\n    } else if (opts.text) {\n      this.renderText(opts.text, opts, next);\n    } else {\n      path = opts.path || opts.fullPath || opts.filename || null;\n      if (path) {\n        this.renderPath(path, opts, next);\n      } else {\n        err = new Error(locale.renderInvalidOptions);\n        return next(err);\n      }\n    }\n    return this;\n  };\n\n  DocPad.prototype.watch = function(opts, next) {\n    var changeHandler, closeWatchers, config, database, docpad, locale, performGenerate, queueRegeneration, regenerateTimer, resetWatchers, watchers, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    locale = this.getLocale();\n    database = this.getDatabase();\n    watchers = [];\n    closeWatchers = function() {\n      var watcher, _i, _len;\n      for (_i = 0, _len = watchers.length; _i < _len; _i++) {\n        watcher = watchers[_i];\n        watcher.close();\n        watcher = null;\n      }\n      return watchers = [];\n    };\n    resetWatchers = function(next) {\n      var regeneratePaths, reloadPaths, srcPath, tasks;\n      closeWatchers();\n      tasks = new TaskGroup().setConfig({\n        concurrency: 0\n      }).once('complete', next);\n      reloadPaths = _.union(config.reloadPaths, config.configPaths);\n      tasks.addTask(function(complete) {\n        return docpad.watchdir({\n          paths: reloadPaths,\n          listeners: {\n            'log': docpad.log,\n            'error': docpad.error,\n            'change': function() {\n              docpad.log('info', util.format(locale.watchReloadChange, new Date().toLocaleTimeString()));\n              return docpad.action('load', function(err) {\n                if (err) {\n                  return docpad.fatal(err);\n                }\n                return performGenerate({\n                  reset: true\n                });\n              });\n            }\n          },\n          next: function(err, _watchers) {\n            var watcher, _i, _len;\n            if (err) {\n              docpad.log('warn', \"Watching the reload paths has failed:\", reloadPaths, err);\n              return complete();\n            }\n            for (_i = 0, _len = _watchers.length; _i < _len; _i++) {\n              watcher = _watchers[_i];\n              watchers.push(watcher);\n            }\n            return complete();\n          }\n        });\n      });\n      regeneratePaths = config.regeneratePaths;\n      tasks.addTask(function(complete) {\n        return docpad.watchdir({\n          paths: regeneratePaths,\n          listeners: {\n            'log': docpad.log,\n            'error': docpad.error,\n            'change': function() {\n              return performGenerate({\n                reset: true\n              });\n            }\n          },\n          next: function(err, _watchers) {\n            var watcher, _i, _len;\n            if (err) {\n              docpad.log('warn', \"Watching the regenerate paths has failed:\", regeneratePaths, err);\n              return complete();\n            }\n            for (_i = 0, _len = _watchers.length; _i < _len; _i++) {\n              watcher = _watchers[_i];\n              watchers.push(watcher);\n            }\n            return complete();\n          }\n        });\n      });\n      srcPath = config.srcPath;\n      tasks.addTask(function(complete) {\n        return docpad.watchdir({\n          path: srcPath,\n          listeners: {\n            'log': docpad.log,\n            'error': docpad.error,\n            'change': changeHandler\n          },\n          next: function(err, watcher) {\n            if (err) {\n              docpad.log('warn', \"Watching the src path has failed:\", srcPath, err);\n              return complete();\n            }\n            watchers.push(watcher);\n            return complete();\n          }\n        });\n      });\n      return tasks.run();\n    };\n    regenerateTimer = null;\n    queueRegeneration = function() {\n      if (regenerateTimer) {\n        clearTimeout(regenerateTimer);\n        regenerateTimer = null;\n      }\n      return regenerateTimer = setTimeout(performGenerate, config.regenerateDelay);\n    };\n    performGenerate = function(opts) {\n      if (opts == null) {\n        opts = {};\n      }\n      if (opts.reset == null) {\n        opts.reset = false;\n      }\n      docpad.log(util.format(locale.watchRegenerating, new Date().toLocaleTimeString()));\n      return docpad.action('generate', opts, function(err) {\n        if (err) {\n          docpad.error(err);\n        }\n        return docpad.log(util.format(locale.watchRegenerated, new Date().toLocaleTimeString()));\n      });\n    };\n    changeHandler = function(changeType, filePath, fileCurrentStat, filePreviousStat) {\n      var file, isDirectory, isIgnored;\n      docpad.log('debug', util.format(locale.watchChange, new Date().toLocaleTimeString()), changeType, filePath);\n      isIgnored = docpad.isIgnoredPath(filePath);\n      if (isIgnored) {\n        docpad.log('debug', util.format(locale.watchIgnoredChange, new Date().toLocaleTimeString()), filePath);\n        return;\n      }\n      isDirectory = (fileCurrentStat || filePreviousStat).isDirectory();\n      if (isDirectory) {\n        docpad.log('debug', util.format(locale.watchDirectoryChange, new Date().toLocaleTimeString()), filePath);\n        return;\n      }\n      if (fileCurrentStat != null) {\n        fileCurrentStat.mtime = new Date();\n      }\n      file = docpad.ensureFileOrDocument({\n        fullPath: filePath\n      }, {\n        stat: fileCurrentStat\n      });\n      if (changeType === 'update') {\n        file.setStat(fileCurrentStat);\n      }\n      if (changeType === 'delete') {\n        database.remove(file);\n        return file[\"delete\"](function(err) {\n          if (err) {\n            return docpad.error(err);\n          }\n          return queueRegeneration();\n        });\n      } else if (changeType === 'create' || changeType === 'update') {\n        return queueRegeneration();\n      }\n    };\n    docpad.log(locale.watchStart);\n    resetWatchers(function(err) {\n      if (err) {\n        return next(err);\n      }\n      docpad.log(locale.watchStarted);\n      return next();\n    });\n    return this;\n  };\n\n  DocPad.prototype.run = function(opts, next) {\n    var config, docpad, locale, rootPath, runDocpad, srcPath, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    config = this.getConfig();\n    srcPath = config.srcPath, rootPath = config.rootPath;\n    runDocpad = function() {\n      return balUtil.flow({\n        object: docpad,\n        action: 'server generate watch',\n        args: [opts],\n        next: function(err) {\n          return next(err);\n        }\n      });\n    };\n    safefs.exists(srcPath, function(exists) {\n      if (exists) {\n        return runDocpad();\n      }\n      return safefs.readdir(rootPath, function(err, files) {\n        if (err) {\n          return next(err);\n        }\n        if (files.length) {\n          docpad.log('warn', \"\\n\" + util.format(locale.skeletonNonexistant, rootPath));\n          return next();\n        } else {\n          return docpad.skeleton(opts, function(err) {\n            if (err) {\n              return next(err);\n            }\n            return runDocpad();\n          });\n        }\n      });\n    });\n    return this;\n  };\n\n  DocPad.prototype.initInstall = function(opts, next) {\n    var config, docpad, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    tasks = new TaskGroup().setConfig({\n      concurrency: 0\n    }).once('complete', next);\n    tasks.addTask(function(complete) {\n      var path;\n      path = pathUtil.join(config.rootPath, 'node_modules');\n      return safefs.ensurePath(path, complete);\n    });\n    tasks.addTask(function(complete) {\n      var path;\n      path = pathUtil.join(config.rootPath, 'package.json');\n      return safefs.exists(path, function(exists) {\n        var data;\n        if (exists) {\n          return complete();\n        }\n        data = JSON.stringify({\n          name: 'no-skeleton.docpad',\n          version: '0.1.0',\n          description: 'New DocPad project without using a skeleton',\n          engines: {\n            node: '0.10',\n            npm: '1.3'\n          },\n          dependencies: {\n            docpad: '~' + docpad.version\n          },\n          main: 'node_modules/docpad/bin/docpad-server',\n          scripts: {\n            start: 'node_modules/docpad/bin/docpad-server'\n          }\n        }, null, '  ');\n        return safefs.writeFile(path, data, complete);\n      });\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.install = function(opts, next) {\n    var config, docpad, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    tasks = new TaskGroup().once('complete', next);\n    tasks.addTask(function(complete) {\n      return docpad.initInstall(opts, complete);\n    });\n    if (opts.plugin) {\n      tasks.addTask(function(complete) {\n        var plugin, plugins;\n        plugins = (function() {\n          var _i, _len, _ref2, _results;\n          _ref2 = opts.plugin.split(/[,\\s]+/);\n          _results = [];\n          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n            plugin = _ref2[_i];\n            if (plugin.indexOf('docpad-plugin-') !== 0) {\n              plugin = \"docpad-plugin-\" + plugin;\n            }\n            if (plugin.indexOf('@') === -1) {\n              plugin += '@' + docpad.pluginVersion;\n            }\n            _results.push(plugin);\n          }\n          return _results;\n        })();\n        return docpad.initNodeModule(plugins, {\n          output: true,\n          next: complete\n        });\n      });\n    }\n    tasks.addTask(function(complete) {\n      return docpad.initNodeModules({\n        output: true,\n        next: complete\n      });\n    });\n    tasks.addTask(function(complete) {\n      return docpad.load(complete);\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.update = function(opts, next) {\n    var config, dependencies, devDependencies, docpad, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    tasks = new TaskGroup().once('complete', next);\n    tasks.addTask(function(complete) {\n      return docpad.initInstall(opts, complete);\n    });\n    tasks.addTask(function(complete) {\n      return docpad.initNodeModule('docpad@6', {\n        output: true,\n        next: complete\n      });\n    });\n    dependencies = [];\n    eachr(docpad.websitePackageConfig.dependencies, function(version, name) {\n      if (/^docpad-plugin-/.test(name) === false) {\n        return;\n      }\n      return dependencies.push(name + '@' + docpad.pluginVersion);\n    });\n    tasks.addTask(function(complete) {\n      return docpad.initNodeModule(dependencies, {\n        output: true,\n        next: complete\n      });\n    });\n    devDependencies = [];\n    eachr(docpad.websitePackageConfig.devDependencies, function(version, name) {\n      if (/^docpad-plugin-/.test(name) === false) {\n        return;\n      }\n      return devDependencies.push(name + '@' + docpad.pluginVersion);\n    });\n    tasks.addTask(function(complete) {\n      return docpad.initNodeModule(devDependencies, {\n        save: '--save-dev',\n        output: true,\n        next: complete\n      });\n    });\n    tasks.addTask(function(complete) {\n      return docpad.initNodeModules({\n        output: true,\n        next: complete\n      });\n    });\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.clean = function(opts, next) {\n    var docpad, locale, outPath, rootPath, _ref1, _ref2;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    _ref2 = this.config, rootPath = _ref2.rootPath, outPath = _ref2.outPath;\n    docpad.log('debug', locale.renderCleaning);\n    docpad.resetCollections(function(err) {\n      if (err) {\n        return next(err);\n      }\n      if (rootPath.indexOf(outPath) !== -1) {\n        return next();\n      } else {\n        return balUtil.rmdirDeep(outPath, function(err, list, tree) {\n          if (!err) {\n            docpad.log('debug', locale.renderCleaned);\n          }\n          return next();\n        });\n      }\n    });\n    return this;\n  };\n\n  DocPad.prototype.initSkeleton = function(skeletonModel, opts, next) {\n    var config, docpad, tasks, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    if (opts.destinationPath == null) {\n      opts.destinationPath = config.rootPath;\n    }\n    tasks = new TaskGroup().once('complete', next);\n    tasks.addTask(function(complete) {\n      return safefs.ensurePath(opts.destinationPath, complete);\n    });\n    if ((skeletonModel != null) && skeletonModel.id !== 'none') {\n      tasks.addTask(function(complete) {\n        return docpad.initGitRepo({\n          path: opts.destinationPath,\n          url: skeletonModel.get('repo'),\n          branch: skeletonModel.get('branch'),\n          remote: 'skeleton',\n          output: true,\n          next: complete\n        });\n      });\n    } else {\n      tasks.addTask(function(complete) {\n        return safefs.ensurePath(config.srcPath, complete);\n      });\n      tasks.addGroup(function() {\n        this.setConfig({\n          concurrency: 0\n        });\n        this.addTask(function(complete) {\n          var path;\n          path = pathUtil.join(config.rootPath, 'README.md');\n          return safefs.exists(path, function(exists) {\n            var data;\n            if (exists) {\n              return complete();\n            }\n            data = \"# Your [DocPad](http://docpad.org) Project\\n\\n## License\\nCopyright &copy; \" + ((new Date()).getFullYear()) + \"+ All rights reserved.\";\n            return safefs.writeFile(path, data, complete);\n          });\n        });\n        this.addTask(function(complete) {\n          return docpad.getConfigPath(function(err, path) {\n            var data;\n            if (err || path) {\n              return complete(err);\n            }\n            path = pathUtil.join(config.rootPath, 'docpad.coffee');\n            data = \"# DocPad Configuration File\\n# http://docpad.org/docs/config\\n\\n# Define the DocPad Configuration\\ndocpadConfig = {\\n\t# ...\\n}\\n\\n# Export the DocPad Configuration\\nmodule.exports = docpadConfig\";\n            return safefs.writeFile(path, data, complete);\n          });\n        });\n        this.addTask(function(complete) {\n          return safefs.ensurePath(config.documentsPaths[0], complete);\n        });\n        this.addTask(function(complete) {\n          return safefs.ensurePath(config.layoutsPaths[0], complete);\n        });\n        return this.addTask(function(complete) {\n          return safefs.ensurePath(config.filesPaths[0], complete);\n        });\n      });\n    }\n    tasks.run();\n    return this;\n  };\n\n  DocPad.prototype.installSkeleton = function(skeletonModel, opts, next) {\n    var docpad, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    if (opts.destinationPath == null) {\n      opts.destinationPath = this.getConfig().rootPath;\n    }\n    docpad.initSkeleton(skeletonModel, opts, function(err) {\n      if (err) {\n        return next(err);\n      }\n      return docpad.install(next);\n    });\n    return this;\n  };\n\n  DocPad.prototype.useSkeleton = function(skeletonModel, opts, next) {\n    var docpad, locale, skeletonId, skeletonName, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    if (opts.destinationPath == null) {\n      opts.destinationPath = this.getConfig().rootPath;\n    }\n    skeletonId = (skeletonModel != null ? skeletonModel.id : void 0) || 'none';\n    skeletonName = (skeletonModel != null ? skeletonModel.get('name') : void 0) || locale.skeletonNoneName;\n    docpad.track('skeleton-use', {\n      skeletonId: skeletonId\n    });\n    docpad.log('info', util.format(locale.skeletonInstall, skeletonName, opts.destinationPath) + ' ' + locale.pleaseWait);\n    docpad.installSkeleton(skeletonModel, opts, function(err) {\n      if (err) {\n        return next(err);\n      }\n      docpad.log('info', locale.skeletonInstalled);\n      return next(err);\n    });\n    return this;\n  };\n\n  DocPad.prototype.selectSkeleton = function(opts, next) {\n    var docpad, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    if (opts.selectSkeletonCallback == null) {\n      opts.selectSkeletonCallback = null;\n    }\n    docpad.track('skeleton-ask');\n    docpad.getSkeletons(function(err, skeletonsCollection) {\n      if (err) {\n        return next(err);\n      }\n      return opts.selectSkeletonCallback(skeletonsCollection, next);\n    });\n    return this;\n  };\n\n  DocPad.prototype.skeleton = function(opts, next) {\n    var config, docpad, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.getConfig();\n    if (opts.selectSkeletonCallback == null) {\n      opts.selectSkeletonCallback = null;\n    }\n    safefs.exists(config.srcPath, function(exists) {\n      var err;\n      if (exists) {\n        err = new Error(locale.skeletonExists);\n        return next(err);\n      }\n      return docpad.selectSkeleton(opts, function(err, skeletonModel) {\n        if (err) {\n          return next(err);\n        }\n        return docpad.useSkeleton(skeletonModel, next);\n      });\n    });\n    return this;\n  };\n\n  DocPad.prototype.init = function(opts, next) {\n    var config, docpad, locale, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    locale = this.getLocale();\n    config = this.getConfig();\n    safefs.exists(config.srcPath, function(exists) {\n      var err;\n      if (exists) {\n        err = new Error(locale.skeletonExists);\n        return next(err);\n      }\n      return docpad.useSkeleton(null, next);\n    });\n    return this;\n  };\n\n  DocPad.prototype.serveDocument = function(opts, next) {\n    var content, contentType, docpad, document, dynamic, err, req, res, templateData, _ref1;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    document = opts.document, err = opts.err, req = opts.req, res = opts.res;\n    docpad = this;\n    if (!document) {\n      if (opts.statusCode != null) {\n        return res.send(opts.statusCode);\n      } else {\n        return next();\n      }\n    }\n    contentType = document.get('outContentType') || document.get('contentType');\n    res.setHeader('Content-Type', contentType);\n    dynamic = document.get('dynamic');\n    if (dynamic) {\n      templateData = extendr.extend({}, req.templateData || {}, {\n        req: req,\n        err: err\n      });\n      templateData = docpad.getTemplateData(templateData);\n      document.render({\n        templateData: templateData\n      }, function(err) {\n        var content;\n        content = document.getOutContent();\n        if (err) {\n          docpad.error(err);\n          return next(err);\n        } else {\n          if (opts.statusCode != null) {\n            return res.send(opts.statusCode, content);\n          } else {\n            return res.send(content);\n          }\n        }\n      });\n    } else {\n      content = document.getOutContent();\n      if (content) {\n        if (opts.statusCode != null) {\n          return res.send(opts.statusCode, content);\n        } else {\n          return res.send(content);\n        }\n      } else {\n        if (opts.statusCode != null) {\n          return res.send(opts.statusCode);\n        } else {\n          return next();\n        }\n      }\n    }\n    return this;\n  };\n\n  DocPad.prototype.serverMiddlewareHeader = function(req, res, next) {\n    var docpad, tools;\n    docpad = this;\n    tools = res.get('X-Powered-By').split(/[,\\s]+/g);\n    tools.push(\"DocPad v\" + docpad.version);\n    tools = tools.join(', ');\n    res.set('X-Powered-By', tools);\n    next();\n    return this;\n  };\n\n  DocPad.prototype.serverMiddlewareRouter = function(req, res, next) {\n    var docpad;\n    docpad = this;\n    docpad.getFileByRoute(req.url, function(err, file) {\n      var cleanUrl, url;\n      if (err || (file != null) === false) {\n        return next(err);\n      }\n      url = file.get('url');\n      cleanUrl = docpad.getUrlPathname(url);\n      if ((url !== cleanUrl) && (url !== req.url)) {\n        return res.redirect(301, url);\n      }\n      return docpad.serveDocument({\n        document: file,\n        req: req,\n        res: res,\n        next: next\n      });\n    });\n    return this;\n  };\n\n  DocPad.prototype.serverMiddleware404 = function(req, res, next) {\n    var database, docpad, document;\n    docpad = this;\n    database = docpad.getDatabaseCache();\n    if (!database) {\n      return res.send(500);\n    }\n    document = database.findOne({\n      relativeOutPath: '404.html'\n    });\n    docpad.serveDocument({\n      document: document,\n      req: req,\n      res: res,\n      next: next,\n      statusCode: 404\n    });\n    return this;\n  };\n\n  DocPad.prototype.serverMiddleware500 = function(err, req, res, next) {\n    var database, docpad, document;\n    docpad = this;\n    database = docpad.getDatabaseCache();\n    if (!database) {\n      return res.send(500);\n    }\n    document = database.findOne({\n      relativeOutPath: '500.html'\n    });\n    docpad.serveDocument({\n      document: document,\n      err: err,\n      req: req,\n      res: res,\n      next: next,\n      statusCode: 500\n    });\n    return this;\n  };\n\n  DocPad.prototype.server = function(opts, next) {\n    var config, docpad, express, finish, http, locale, port, serverExpress, serverHttp, startServer, _ref1, _ref2, _ref3, _ref4;\n    http = null;\n    express = null;\n    _ref1 = extractOptsAndCallback(opts, next), opts = _ref1[0], next = _ref1[1];\n    docpad = this;\n    config = this.config;\n    locale = this.getLocale();\n    port = this.getPort();\n    serverExpress = null;\n    serverHttp = null;\n    if (opts.middlewareBodyParser == null) {\n      opts.middlewareBodyParser = (_ref2 = config.middlewareBodyParser) != null ? _ref2 : config.middlewareStandard;\n    }\n    if (opts.middlewareMethodOverride == null) {\n      opts.middlewareMethodOverride = (_ref3 = config.middlewareMethodOverride) != null ? _ref3 : config.middlewareStandard;\n    }\n    if (opts.middlewareExpressRouter == null) {\n      opts.middlewareExpressRouter = (_ref4 = config.middlewareExpressRouter) != null ? _ref4 : config.middlewareStandard;\n    }\n    if (opts.middleware404 == null) {\n      opts.middleware404 = config.middleware404;\n    }\n    if (opts.middleware500 == null) {\n      opts.middleware500 = config.middleware500;\n    }\n    finish = function(err) {\n      if (err) {\n        return next(err);\n      }\n      return docpad.emitSerial('serverAfter', {\n        server: serverExpress,\n        serverExpress: serverExpress,\n        serverHttp: serverHttp,\n        express: express\n      }, function(err) {\n        if (err) {\n          return next(err);\n        }\n        return next();\n      });\n    };\n    startServer = function(next) {\n      serverHttp.once('error', function(err) {\n        if (err.message.indexOf('EADDRINUSE') !== -1) {\n          err = new Error(util.format(locale.serverInUse, port));\n        }\n        return next(err);\n      });\n      docpad.log('debug', util.format(locale.serverStart, port, config.outPath));\n      return serverHttp.listen(port, function() {\n        var address, serverHostname, serverLocation, serverPort;\n        address = serverHttp.address();\n        serverHostname = address.address === '0.0.0.0' ? 'localhost' : address.address;\n        serverPort = address.port;\n        serverLocation = \"http://\" + serverHostname + \":\" + serverPort + \"/\";\n        docpad.log('info', util.format(locale.serverStarted, serverLocation, config.outPath));\n        return next();\n      });\n    };\n    docpad.emitSerial('serverBefore', {}, function(err) {\n      var _ref5;\n      if (err) {\n        return finish(err);\n      }\n      _ref5 = docpad.getServer(true), serverExpress = _ref5.serverExpress, serverHttp = _ref5.serverHttp;\n      if (!serverExpress && !serverHttp) {\n        if (http == null) {\n          http = require('http');\n        }\n        if (express == null) {\n          express = require('express');\n        }\n        serverExpress = opts.serverExpress || express();\n        serverHttp = opts.serverHttp || http.createServer(serverExpress);\n        docpad.setServer({\n          serverExpress: serverExpress,\n          serverHttp: serverHttp\n        });\n      }\n      if (!config.extendServer) {\n        return startServer(finish);\n      } else {\n        if (express == null) {\n          express = require('express');\n        }\n        if (opts.middlewareBodyParser !== false) {\n          serverExpress.use(express.bodyParser());\n        }\n        if (opts.middlewareMethodOverride !== false) {\n          serverExpress.use(express.methodOverride());\n        }\n        docpad.emitSerial('serverExtend', {\n          server: serverExpress,\n          serverExpress: serverExpress,\n          serverHttp: serverHttp,\n          express: express\n        }, function(err) {\n          if (err) {\n            return next(err);\n          }\n          serverExpress.use(docpad.serverMiddlewareHeader);\n          if (opts.middlewareExpressRouter !== false) {\n            serverExpress.use(serverExpress.router);\n          }\n          serverExpress.use(docpad.serverMiddlewareRouter);\n          if (config.maxAge) {\n            serverExpress.use(express[\"static\"](config.outPath, {\n              maxAge: config.maxAge\n            }));\n          } else {\n            serverExpress.use(express[\"static\"](config.outPath));\n          }\n          if (opts.middleware404 !== false) {\n            serverExpress.use(docpad.serverMiddleware404);\n          }\n          if (opts.middleware500 !== false) {\n            return serverExpress.use(docpad.serverMiddleware500);\n          }\n        });\n        return startServer(finish);\n      }\n    });\n    return this;\n  };\n\n  return DocPad;\n\n})(EventEmitterGrouped);\n\nmodule.exports = {\n  DocPad: DocPad,\n  queryEngine: queryEngine,\n  Backbone: Backbone,\n  createInstance: function() {\n    var args;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(DocPad, args, function(){});\n  }\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":127407}]],"length":127407}
