// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var Tagging, balUtil, _;
  _ = require('lodash');
  balUtil = require('bal-util');
  return Tagging = (function(_super) {

    __extends(Tagging, _super);

    function Tagging() {
      return Tagging.__super__.constructor.apply(this, arguments);
    }

    Tagging.prototype.name = 'tagging';

    Tagging.prototype.config = {
      collectionName: 'documents',
      indexPageLayout: 'tags',
      indexPagePath: 'tags',
      getTagWeight: function(count, maxCount) {
        var logmax, logmin, result;
        logmin = 0;
        logmax = Math.log(maxCount);
        result = (Math.log(count) - logmin) / (logmax - logmin);
        return result;
      }
    };

    Tagging.prototype.tagCloud = null;

    Tagging.prototype.tagCollection = null;

    Tagging.prototype.maxCount = 0;

    Tagging.prototype.contextualizeAfterLock = false;

    Tagging.prototype.extendCollections = function(next) {
      return this.tagCollection = this.docpad.getDatabase().createLiveChildCollection().setQuery("isTagIndex", {
        tag: {
          $exists: true
        }
      });
    };

    Tagging.prototype.extendTemplateData = function(_arg) {
      var me, templateData;
      templateData = _arg.templateData;
      me = this;
      templateData.getTagCloud = function() {
        return me.tagCloud;
      };
      templateData.getTagUrl = function(tag) {
        return me.getTagUrl(tag);
      };
      return this;
    };

    Tagging.prototype.contextualizeAfter = function(_arg, next) {
      var collection, templateData;
      collection = _arg.collection, templateData = _arg.templateData;
      if (!this.contextualizeAfterLock) {
        return this.generateTags(collection, next);
      } else {
        next();
      }
      return this;
    };

    Tagging.prototype.getTagUrl = function(tag) {
      var doc;
      doc = this.tagCollection.findOne({
        tag: tag
      });
      return doc != null ? doc.get('url') : void 0;
    };

    Tagging.prototype.generateTags = function(renderCollection, next) {
      var config, database, doc, docpad, docs_created, me, newDocs, slug, tag, targetedDocuments, _ref,
        _this = this;
      me = this;
      docpad = this.docpad;
      config = this.config;
      database = docpad.getDatabase();
      targetedDocuments = docpad.getCollection(this.config.collectionName);
      docpad.log('debug', 'tagging::generateTags: Generating tag cloud');
      this.maxCount = 0;
      this.tagCloud = {};
      targetedDocuments.forEach(function(document) {
        var count, tag, tags, _base, _i, _len, _ref, _results;
        tags = document.get('tags') || [];
        _results = [];
        for (_i = 0, _len = tags.length; _i < _len; _i++) {
          tag = tags[_i];
          if ((_ref = (_base = _this.tagCloud)[tag]) == null) {
            _base[tag] = {
              tag: tag,
              count: 0,
              url: "",
              weight: 0
            };
          }
          count = ++_this.tagCloud[tag].count;
          if (count > _this.maxCount) {
            _results.push(_this.maxCount = count);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      docpad.log('debug', 'tagging::generateTags: Generating tag index pages');
      docs_created = 0;
      newDocs = new docpad.FilesCollection();
      _ref = this.tagCloud;
      for (tag in _ref) {
        if (!__hasProp.call(_ref, tag)) continue;
        if (!this.tagCollection.findOne({
          tag: tag
        })) {
          slug = balUtil.generateSlugSync(tag);
          doc = this.docpad.createDocument({
            slug: slug,
            relativePath: config.indexPagePath + "/" + slug + ".html",
            isDocument: true,
            encoding: 'utf8'
          }, {
            data: " ",
            meta: {
              layout: config.indexPageLayout,
              referencesOthers: true,
              tag: tag
            }
          });
          database.add(doc);
          newDocs.add(doc);
          if (!renderCollection.findOne({
            tag: tag
          })) {
            renderCollection.add(doc);
          }
          docs_created++;
        }
      }
      docpad.log('debug', "tagging::generateTags: " + docs_created + " new docs added");
      docpad.loadFiles({
        collection: newDocs
      }, function(err) {
        if (err) {
          return next(err);
        }
        _this.contextualizeAfterLock = true;
        return docpad.contextualizeFiles({
          collection: newDocs
        }, function(err) {
          var item, _ref1;
          if (err) {
            return next(err);
          }
          _this.contextualizeAfterLock = false;
          _ref1 = _this.tagCloud;
          for (tag in _ref1) {
            if (!__hasProp.call(_ref1, tag)) continue;
            item = _ref1[tag];
            _this.tagCloud[tag].url = _this.getTagUrl(tag);
            _this.tagCloud[tag].weight = _this.config.getTagWeight(item.count, _this.maxCount);
          }
          return next();
        });
      });
      return this;
    };

    return Tagging;

  })(BasePlugin);
};
