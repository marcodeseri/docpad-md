// Generated by CoffeeScript 1.6.2
var balUtil, pathUtil, safeps,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

safeps = require('safeps');

balUtil = require('bal-util');

pathUtil = require('path');

module.exports = function(BasePlugin) {
  var GhpagesPlugin, _ref;

  return GhpagesPlugin = (function(_super) {
    __extends(GhpagesPlugin, _super);

    function GhpagesPlugin() {
      _ref = GhpagesPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GhpagesPlugin.prototype.name = 'ghpages';

    GhpagesPlugin.prototype.config = {
      deployRemote: 'origin',
      deployBranch: 'gh-pages',
      environment: 'static'
    };

    GhpagesPlugin.prototype.consoleSetup = function(opts) {
      var commander, config, consoleInterface, docpad, me;

      consoleInterface = opts.consoleInterface, commander = opts.commander;
      me = this;
      config = this.getConfig();
      docpad = this.docpad;
      docpad.setInstanceConfig({
        env: config.environment
      });
      commander.command('deploy-ghpages').description("deploys your " + config.environment + " website to the " + config.deployRemote + "/" + config.deployBranch + " branch").action(consoleInterface.wrapAction(function(next) {
        var err, outGitPath, outPath, rootPath, _ref1;

        config = me.getConfig();
        _ref1 = docpad.getConfig(), outPath = _ref1.outPath, rootPath = _ref1.rootPath;
        docpad.log('info', 'Deployment to GitHub Pages starting...');
        if (outPath === rootPath) {
          err = new Error("Your outPath configuration has been customised. Please remove the customisation in order to use the GitHub Pages plugin");
          return next(err);
        }
        outGitPath = pathUtil.join(outPath, '.git');
        docpad.log('debug', 'Removing old ./out/.git directory..');
        return balUtil.rmdirDeep(outGitPath, function(err) {
          if (err) {
            return next(err);
          }
          docpad.log('debug', 'Performing static generation...');
          return docpad.action('generate', {
            env: config.environment
          }, function(err) {
            if (err) {
              return next(err);
            }
            docpad.log('debug', "Fetching the URL of the {config.deployRemote} remote...");
            return safeps.spawnCommand('git', ['config', "remote." + config.deployRemote + ".url"], {
              cwd: rootPath
            }, function(err, stdout, stderr) {
              var remoteRepoUrl;

              if (err) {
                return next(err);
              }
              remoteRepoUrl = stdout.replace(/\n/, "");
              docpad.log('debug', 'Fetching log messages...');
              return safeps.spawnCommand('git', ['log', '--oneline'], {
                cwd: rootPath
              }, function(err, stdout, stderr) {
                var gitCommands, lastCommit;

                if (err) {
                  return next(err);
                }
                docpad.log('debug', 'Performing push...');
                lastCommit = stdout.split('\n')[0];
                gitCommands = [['init'], ['add', '.'], ['commit', '-m', lastCommit], ['push', '--force', remoteRepoUrl, "master:" + config.deployBranch]];
                return safeps.spawnCommands('git', gitCommands, {
                  cwd: outPath,
                  output: true
                }, function(err, stdout, stderr) {
                  if (err) {
                    return next(err);
                  }
                  docpad.log('info', 'Deployment to GitHub Pages completed successfully');
                  docpad.log('debug', 'Removing new ./out/.git directory..');
                  return balUtil.rmdirDeep(outGitPath, function(err) {
                    if (err) {
                      return next(err);
                    }
                    return next();
                  });
                });
              });
            });
          });
        });
      }));
      return this;
    };

    return GhpagesPlugin;

  })(BasePlugin);
};
